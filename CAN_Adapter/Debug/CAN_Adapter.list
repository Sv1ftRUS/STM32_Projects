
CAN_Adapter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002838  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002a1c  08002a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a54  08002a54  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a54  08002a54  00012a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a5c  08002a5c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a5c  08002a5c  00012a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a60  08002a60  00012a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000002c  08002a90  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002a90  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY
 13 .debug_info   000074cf  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000151e  00000000  00000000  00027567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000678  00000000  00000000  00028a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004f2  00000000  00000000  00029100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dfcc  00000000  00000000  000295f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000087bc  00000000  00000000  000475be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae5ae  00000000  00000000  0004fd7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001964  00000000  00000000  000fe328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000ffc8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002a04 	.word	0x08002a04

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000030 	.word	0x20000030
 8000220:	08002a04 	.word	0x08002a04

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b972 	b.w	8000520 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14c      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d967      	bls.n	800033a <__udivmoddi4+0xe6>
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	b153      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000270:	fa02 fc03 	lsl.w	ip, r2, r3
 8000274:	f1c3 0220 	rsb	r2, r3, #32
 8000278:	fa01 fe03 	lsl.w	lr, r1, r3
 800027c:	fa20 f202 	lsr.w	r2, r0, r2
 8000280:	ea42 0e0e 	orr.w	lr, r2, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028a:	fbbe f1f7 	udiv	r1, lr, r7
 800028e:	fa1f f58c 	uxth.w	r5, ip
 8000292:	fb07 ee11 	mls	lr, r7, r1, lr
 8000296:	fb01 f005 	mul.w	r0, r1, r5
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 3eff 	add.w	lr, r1, #4294967295
 80002ac:	f080 8119 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8116 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80002c0:	fb07 2210 	mls	r2, r7, r0, r2
 80002c4:	fb00 f505 	mul.w	r5, r0, r5
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8104 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8101 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	1b64      	subs	r4, r4, r5
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xc0>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ea 	beq.w	80004dc <__udivmoddi4+0x288>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d148      	bne.n	80003ae <__udivmoddi4+0x15a>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xd2>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2c2>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4696      	mov	lr, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa6>
 8000334:	e9c6 4e00 	strd	r4, lr, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa6>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xea>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 808e 	bne.w	8000464 <__udivmoddi4+0x210>
 8000348:	1a88      	subs	r0, r1, r2
 800034a:	2101      	movs	r1, #1
 800034c:	0c17      	lsrs	r7, r2, #16
 800034e:	fa1f fe82 	uxth.w	lr, r2
 8000352:	fbb0 f5f7 	udiv	r5, r0, r7
 8000356:	fb07 0015 	mls	r0, r7, r5, r0
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb0e f005 	mul.w	r0, lr, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x126>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4290      	cmp	r0, r2
 8000374:	f200 80cc 	bhi.w	8000510 <__udivmoddi4+0x2bc>
 8000378:	4645      	mov	r5, r8
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000380:	fb07 2210 	mls	r2, r7, r0, r2
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	45a6      	cmp	lr, r4
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x150>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x14e>
 800039c:	45a6      	cmp	lr, r4
 800039e:	f200 80b4 	bhi.w	800050a <__udivmoddi4+0x2b6>
 80003a2:	4610      	mov	r0, r2
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ac:	e7a0      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003ae:	f1c1 0720 	rsb	r7, r1, #32
 80003b2:	408b      	lsls	r3, r1
 80003b4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003bc:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	fbba f8f9 	udiv	r8, sl, r9
 80003c8:	408d      	lsls	r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	432b      	orrs	r3, r5
 80003d8:	fa00 f501 	lsl.w	r5, r0, r1
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	0c1c      	lsrs	r4, r3, #16
 80003e2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003e6:	42a0      	cmp	r0, r4
 80003e8:	fa02 f201 	lsl.w	r2, r2, r1
 80003ec:	d90b      	bls.n	8000406 <__udivmoddi4+0x1b2>
 80003ee:	eb1c 0404 	adds.w	r4, ip, r4
 80003f2:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f6:	f080 8086 	bcs.w	8000506 <__udivmoddi4+0x2b2>
 80003fa:	42a0      	cmp	r0, r4
 80003fc:	f240 8083 	bls.w	8000506 <__udivmoddi4+0x2b2>
 8000400:	f1a8 0802 	sub.w	r8, r8, #2
 8000404:	4464      	add	r4, ip
 8000406:	1a24      	subs	r4, r4, r0
 8000408:	b298      	uxth	r0, r3
 800040a:	fbb4 f3f9 	udiv	r3, r4, r9
 800040e:	fb09 4413 	mls	r4, r9, r3, r4
 8000412:	fb03 fe0e 	mul.w	lr, r3, lr
 8000416:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800041a:	45a6      	cmp	lr, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f103 30ff 	add.w	r0, r3, #4294967295
 8000426:	d26a      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 8000428:	45a6      	cmp	lr, r4
 800042a:	d968      	bls.n	80004fe <__udivmoddi4+0x2aa>
 800042c:	3b02      	subs	r3, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000434:	fba0 9302 	umull	r9, r3, r0, r2
 8000438:	eba4 040e 	sub.w	r4, r4, lr
 800043c:	429c      	cmp	r4, r3
 800043e:	46c8      	mov	r8, r9
 8000440:	469e      	mov	lr, r3
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d067      	beq.n	800051a <__udivmoddi4+0x2c6>
 800044a:	ebb5 0308 	subs.w	r3, r5, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	40cb      	lsrs	r3, r1
 8000454:	fa04 f707 	lsl.w	r7, r4, r7
 8000458:	431f      	orrs	r7, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	2100      	movs	r1, #0
 8000462:	e74a      	b.n	80002fa <__udivmoddi4+0xa6>
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	f1c3 0020 	rsb	r0, r3, #32
 800046c:	40c1      	lsrs	r1, r0
 800046e:	409d      	lsls	r5, r3
 8000470:	fa24 f000 	lsr.w	r0, r4, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	4328      	orrs	r0, r5
 800047a:	fbb1 f5f7 	udiv	r5, r1, r7
 800047e:	fb07 1115 	mls	r1, r7, r5, r1
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	0c02      	lsrs	r2, r0, #16
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	fb05 f10e 	mul.w	r1, r5, lr
 8000490:	4291      	cmp	r1, r2
 8000492:	fa04 f403 	lsl.w	r4, r4, r3
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x256>
 8000498:	eb1c 0202 	adds.w	r2, ip, r2
 800049c:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a0:	d22f      	bcs.n	8000502 <__udivmoddi4+0x2ae>
 80004a2:	4291      	cmp	r1, r2
 80004a4:	d92d      	bls.n	8000502 <__udivmoddi4+0x2ae>
 80004a6:	3d02      	subs	r5, #2
 80004a8:	4462      	add	r2, ip
 80004aa:	1a52      	subs	r2, r2, r1
 80004ac:	fbb2 f1f7 	udiv	r1, r2, r7
 80004b0:	fb07 2211 	mls	r2, r7, r1, r2
 80004b4:	b280      	uxth	r0, r0
 80004b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004ba:	fb01 f20e 	mul.w	r2, r1, lr
 80004be:	4282      	cmp	r2, r0
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x280>
 80004c2:	eb1c 0000 	adds.w	r0, ip, r0
 80004c6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004ca:	d216      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d914      	bls.n	80004fa <__udivmoddi4+0x2a6>
 80004d0:	3902      	subs	r1, #2
 80004d2:	4460      	add	r0, ip
 80004d4:	1a80      	subs	r0, r0, r2
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4631      	mov	r1, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e70b      	b.n	80002fa <__udivmoddi4+0xa6>
 80004e2:	4671      	mov	r1, lr
 80004e4:	e6e9      	b.n	80002ba <__udivmoddi4+0x66>
 80004e6:	4610      	mov	r0, r2
 80004e8:	e6fe      	b.n	80002e8 <__udivmoddi4+0x94>
 80004ea:	454d      	cmp	r5, r9
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb9 0802 	subs.w	r8, r9, r2
 80004f2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7a5      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fa:	4641      	mov	r1, r8
 80004fc:	e7ea      	b.n	80004d4 <__udivmoddi4+0x280>
 80004fe:	4603      	mov	r3, r0
 8000500:	e796      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000502:	4645      	mov	r5, r8
 8000504:	e7d1      	b.n	80004aa <__udivmoddi4+0x256>
 8000506:	46d0      	mov	r8, sl
 8000508:	e77d      	b.n	8000406 <__udivmoddi4+0x1b2>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e749      	b.n	80003a4 <__udivmoddi4+0x150>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e731      	b.n	800037a <__udivmoddi4+0x126>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xdc>
 800051a:	4631      	mov	r1, r6
 800051c:	e6ed      	b.n	80002fa <__udivmoddi4+0xa6>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 f9f2 	bl	8000910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f822 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f89e 	bl	8000670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000534:	f000 f872 	bl	800061c <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053c:	4809      	ldr	r0, [pc, #36]	; (8000564 <main+0x40>)
 800053e:	f000 fe59 	bl	80011f4 <HAL_GPIO_TogglePin>
	  HAL_UART_Receive (&huart2, str_Rx, sizeof(str_Rx), 100);
 8000542:	2364      	movs	r3, #100	; 0x64
 8000544:	2220      	movs	r2, #32
 8000546:	4908      	ldr	r1, [pc, #32]	; (8000568 <main+0x44>)
 8000548:	4808      	ldr	r0, [pc, #32]	; (800056c <main+0x48>)
 800054a:	f001 fc4c 	bl	8001de6 <HAL_UART_Receive>
	  HAL_Delay(100);
 800054e:	2064      	movs	r0, #100	; 0x64
 8000550:	f000 fa40 	bl	80009d4 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, str_Tx, sizeof(str_Tx), 100);
 8000554:	2364      	movs	r3, #100	; 0x64
 8000556:	221f      	movs	r2, #31
 8000558:	4905      	ldr	r1, [pc, #20]	; (8000570 <main+0x4c>)
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <main+0x48>)
 800055c:	f001 fbc0 	bl	8001ce0 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000560:	e7ea      	b.n	8000538 <main+0x14>
 8000562:	bf00      	nop
 8000564:	40010c00 	.word	0x40010c00
 8000568:	20000090 	.word	0x20000090
 800056c:	20000048 	.word	0x20000048
 8000570:	20000000 	.word	0x20000000

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0318 	add.w	r3, r7, #24
 800057e:	2238      	movs	r2, #56	; 0x38
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fa12 	bl	80029ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000596:	2301      	movs	r3, #1
 8000598:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80005a0:	2304      	movs	r3, #4
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80005c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80005c8:	2340      	movs	r3, #64	; 0x40
 80005ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0318 	add.w	r3, r7, #24
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fe29 	bl	8001228 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005dc:	f000 f8a0 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2302      	movs	r3, #2
 80005e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2102      	movs	r1, #2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f92a 	bl	8001854 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000606:	f000 f88b 	bl	8000720 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800060a:	4b03      	ldr	r3, [pc, #12]	; (8000618 <SystemClock_Config+0xa4>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	; 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	42420070 	.word	0x42420070

0800061c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <MX_USART2_UART_Init+0x50>)
 8000624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000628:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800062c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000654:	f001 faf4 	bl	8001c40 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800065e:	f000 f85f 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000048 	.word	0x20000048
 800066c:	40004400 	.word	0x40004400

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <MX_GPIO_Init+0xa8>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a23      	ldr	r2, [pc, #140]	; (8000718 <MX_GPIO_Init+0xa8>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <MX_GPIO_Init+0xa8>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0310 	and.w	r3, r3, #16
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_GPIO_Init+0xa8>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <MX_GPIO_Init+0xa8>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_GPIO_Init+0xa8>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_GPIO_Init+0xa8>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a17      	ldr	r2, [pc, #92]	; (8000718 <MX_GPIO_Init+0xa8>)
 80006ba:	f043 0320 	orr.w	r3, r3, #32
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_GPIO_Init+0xa8>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0320 	and.w	r3, r3, #32
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_GPIO_Init+0xa8>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a11      	ldr	r2, [pc, #68]	; (8000718 <MX_GPIO_Init+0xa8>)
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_GPIO_Init+0xa8>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0308 	and.w	r3, r3, #8
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <MX_GPIO_Init+0xac>)
 80006ec:	f000 fd6a 	bl	80011c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006fa:	2302      	movs	r3, #2
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2302      	movs	r3, #2
 8000700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	4619      	mov	r1, r3
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_GPIO_Init+0xac>)
 800070a:	f000 fbd7 	bl	8000ebc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800070e:	bf00      	nop
 8000710:	3720      	adds	r7, #32
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000
 800071c:	40010c00 	.word	0x40010c00

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>
	...

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_MspInit+0x5c>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <HAL_MspInit+0x5c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_MspInit+0x5c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_MspInit+0x5c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <HAL_MspInit+0x5c>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_MspInit+0x5c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_MspInit+0x60>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_MspInit+0x60>)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000
 800078c:	40010000 	.word	0x40010000

08000790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a26      	ldr	r2, [pc, #152]	; (8000844 <HAL_UART_MspInit+0xb4>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d145      	bne.n	800083c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <HAL_UART_MspInit+0xb8>)
 80007b2:	69db      	ldr	r3, [r3, #28]
 80007b4:	4a24      	ldr	r2, [pc, #144]	; (8000848 <HAL_UART_MspInit+0xb8>)
 80007b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ba:	61d3      	str	r3, [r2, #28]
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <HAL_UART_MspInit+0xb8>)
 80007be:	69db      	ldr	r3, [r3, #28]
 80007c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <HAL_UART_MspInit+0xb8>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <HAL_UART_MspInit+0xb8>)
 80007ce:	f043 0320 	orr.w	r3, r3, #32
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <HAL_UART_MspInit+0xb8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0320 	and.w	r3, r3, #32
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007e0:	2320      	movs	r3, #32
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	4816      	ldr	r0, [pc, #88]	; (800084c <HAL_UART_MspInit+0xbc>)
 80007f4:	f000 fb62 	bl	8000ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007f8:	2340      	movs	r3, #64	; 0x40
 80007fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4810      	ldr	r0, [pc, #64]	; (800084c <HAL_UART_MspInit+0xbc>)
 800080c:	f000 fb56 	bl	8000ebc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART2_ENABLE();
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_UART_MspInit+0xc0>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
 8000816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000818:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <HAL_UART_MspInit+0xc0>)
 8000828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082a:	6053      	str	r3, [r2, #4]

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	2100      	movs	r1, #0
 8000830:	2026      	movs	r0, #38	; 0x26
 8000832:	f000 f9ca 	bl	8000bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000836:	2026      	movs	r0, #38	; 0x26
 8000838:	f000 f9e3 	bl	8000c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40004400 	.word	0x40004400
 8000848:	40021000 	.word	0x40021000
 800084c:	40011400 	.word	0x40011400
 8000850:	40010000 	.word	0x40010000

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000858:	e7fe      	b.n	8000858 <NMI_Handler+0x4>

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <MemManage_Handler+0x4>

08000866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler+0x4>

08000872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089a:	f000 f87f 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <USART2_IRQHandler+0x10>)
 80008aa:	f001 fb2f 	bl	8001f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000048 	.word	0x20000048

080008b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c4:	f7ff fff8 	bl	80008b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480b      	ldr	r0, [pc, #44]	; (80008f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008ca:	490c      	ldr	r1, [pc, #48]	; (80008fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008cc:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a09      	ldr	r2, [pc, #36]	; (8000904 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008e0:	4c09      	ldr	r4, [pc, #36]	; (8000908 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80008ee:	f002 f865 	bl	80029bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008f2:	f7ff fe17 	bl	8000524 <main>
  bx lr
 80008f6:	4770      	bx	lr
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000900:	08002a64 	.word	0x08002a64
  ldr r2, =_sbss
 8000904:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000908:	200000b4 	.word	0x200000b4

0800090c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC1_2_IRQHandler>
	...

08000910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_Init+0x28>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <HAL_Init+0x28>)
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f947 	bl	8000bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000926:	200f      	movs	r0, #15
 8000928:	f000 f808 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800092c:	f7ff fefe 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40022000 	.word	0x40022000

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_InitTick+0x54>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_InitTick+0x58>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000952:	fbb3 f3f1 	udiv	r3, r3, r1
 8000956:	fbb2 f3f3 	udiv	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f95f 	bl	8000c1e <HAL_SYSTICK_Config>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e00e      	b.n	8000988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d80a      	bhi.n	8000986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f000 f927 	bl	8000bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <HAL_InitTick+0x5c>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000020 	.word	0x20000020
 8000994:	20000028 	.word	0x20000028
 8000998:	20000024 	.word	0x20000024

0800099c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_IncTick+0x1c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_IncTick+0x20>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a03      	ldr	r2, [pc, #12]	; (80009bc <HAL_IncTick+0x20>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	20000028 	.word	0x20000028
 80009bc:	200000b0 	.word	0x200000b0

080009c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return uwTick;
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <HAL_GetTick+0x10>)
 80009c6:	681b      	ldr	r3, [r3, #0]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	200000b0 	.word	0x200000b0

080009d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009dc:	f7ff fff0 	bl	80009c0 <HAL_GetTick>
 80009e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ec:	d005      	beq.n	80009fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_Delay+0x44>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009fa:	bf00      	nop
 80009fc:	f7ff ffe0 	bl	80009c0 <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d8f7      	bhi.n	80009fc <HAL_Delay+0x28>
  {
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000028 	.word	0x20000028

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	db0b      	blt.n	8000aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f003 021f 	and.w	r2, r3, #31
 8000a98:	4906      	ldr	r1, [pc, #24]	; (8000ab4 <__NVIC_EnableIRQ+0x34>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	095b      	lsrs	r3, r3, #5
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	; (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	; (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f1c3 0307 	rsb	r3, r3, #7
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	bf28      	it	cs
 8000b2a:	2304      	movcs	r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	d902      	bls.n	8000b3c <NVIC_EncodePriority+0x30>
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	e000      	b.n	8000b3e <NVIC_EncodePriority+0x32>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43d9      	mvns	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	4313      	orrs	r3, r2
         );
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	; 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b80:	d301      	bcc.n	8000b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00f      	b.n	8000ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <SysTick_Config+0x40>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8e:	210f      	movs	r1, #15
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f7ff ff90 	bl	8000ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <SysTick_Config+0x40>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <SysTick_Config+0x40>)
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	e000e010 	.word	0xe000e010

08000bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ff2d 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bdc:	f7ff ff42 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	6978      	ldr	r0, [r7, #20]
 8000be8:	f7ff ff90 	bl	8000b0c <NVIC_EncodePriority>
 8000bec:	4602      	mov	r2, r0
 8000bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff5f 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff35 	bl	8000a80 <__NVIC_EnableIRQ>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ffa2 	bl	8000b70 <SysTick_Config>
 8000c2c:	4603      	mov	r3, r0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b085      	sub	sp, #20
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d008      	beq.n	8000c60 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2204      	movs	r2, #4
 8000c52:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e020      	b.n	8000ca2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 020e 	bic.w	r2, r2, #14
 8000c6e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 0201 	bic.w	r2, r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c88:	2101      	movs	r1, #1
 8000c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d005      	beq.n	8000cd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
 8000cce:	e0d6      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f022 020e 	bic.w	r2, r2, #14
 8000cde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 0201 	bic.w	r2, r2, #1
 8000cee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b64      	ldr	r3, [pc, #400]	; (8000e88 <HAL_DMA_Abort_IT+0x1dc>)
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d958      	bls.n	8000dae <HAL_DMA_Abort_IT+0x102>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a62      	ldr	r2, [pc, #392]	; (8000e8c <HAL_DMA_Abort_IT+0x1e0>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d04f      	beq.n	8000da6 <HAL_DMA_Abort_IT+0xfa>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a61      	ldr	r2, [pc, #388]	; (8000e90 <HAL_DMA_Abort_IT+0x1e4>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d048      	beq.n	8000da2 <HAL_DMA_Abort_IT+0xf6>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a5f      	ldr	r2, [pc, #380]	; (8000e94 <HAL_DMA_Abort_IT+0x1e8>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d040      	beq.n	8000d9c <HAL_DMA_Abort_IT+0xf0>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a5e      	ldr	r2, [pc, #376]	; (8000e98 <HAL_DMA_Abort_IT+0x1ec>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d038      	beq.n	8000d96 <HAL_DMA_Abort_IT+0xea>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a5c      	ldr	r2, [pc, #368]	; (8000e9c <HAL_DMA_Abort_IT+0x1f0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d030      	beq.n	8000d90 <HAL_DMA_Abort_IT+0xe4>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a5b      	ldr	r2, [pc, #364]	; (8000ea0 <HAL_DMA_Abort_IT+0x1f4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d028      	beq.n	8000d8a <HAL_DMA_Abort_IT+0xde>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a52      	ldr	r2, [pc, #328]	; (8000e88 <HAL_DMA_Abort_IT+0x1dc>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d020      	beq.n	8000d84 <HAL_DMA_Abort_IT+0xd8>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a57      	ldr	r2, [pc, #348]	; (8000ea4 <HAL_DMA_Abort_IT+0x1f8>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d019      	beq.n	8000d80 <HAL_DMA_Abort_IT+0xd4>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a55      	ldr	r2, [pc, #340]	; (8000ea8 <HAL_DMA_Abort_IT+0x1fc>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d012      	beq.n	8000d7c <HAL_DMA_Abort_IT+0xd0>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a54      	ldr	r2, [pc, #336]	; (8000eac <HAL_DMA_Abort_IT+0x200>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d00a      	beq.n	8000d76 <HAL_DMA_Abort_IT+0xca>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a52      	ldr	r2, [pc, #328]	; (8000eb0 <HAL_DMA_Abort_IT+0x204>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d102      	bne.n	8000d70 <HAL_DMA_Abort_IT+0xc4>
 8000d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6e:	e01b      	b.n	8000da8 <HAL_DMA_Abort_IT+0xfc>
 8000d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d74:	e018      	b.n	8000da8 <HAL_DMA_Abort_IT+0xfc>
 8000d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d7a:	e015      	b.n	8000da8 <HAL_DMA_Abort_IT+0xfc>
 8000d7c:	2310      	movs	r3, #16
 8000d7e:	e013      	b.n	8000da8 <HAL_DMA_Abort_IT+0xfc>
 8000d80:	2301      	movs	r3, #1
 8000d82:	e011      	b.n	8000da8 <HAL_DMA_Abort_IT+0xfc>
 8000d84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d88:	e00e      	b.n	8000da8 <HAL_DMA_Abort_IT+0xfc>
 8000d8a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d8e:	e00b      	b.n	8000da8 <HAL_DMA_Abort_IT+0xfc>
 8000d90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d94:	e008      	b.n	8000da8 <HAL_DMA_Abort_IT+0xfc>
 8000d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9a:	e005      	b.n	8000da8 <HAL_DMA_Abort_IT+0xfc>
 8000d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da0:	e002      	b.n	8000da8 <HAL_DMA_Abort_IT+0xfc>
 8000da2:	2310      	movs	r3, #16
 8000da4:	e000      	b.n	8000da8 <HAL_DMA_Abort_IT+0xfc>
 8000da6:	2301      	movs	r3, #1
 8000da8:	4a42      	ldr	r2, [pc, #264]	; (8000eb4 <HAL_DMA_Abort_IT+0x208>)
 8000daa:	6053      	str	r3, [r2, #4]
 8000dac:	e057      	b.n	8000e5e <HAL_DMA_Abort_IT+0x1b2>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a36      	ldr	r2, [pc, #216]	; (8000e8c <HAL_DMA_Abort_IT+0x1e0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d04f      	beq.n	8000e58 <HAL_DMA_Abort_IT+0x1ac>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a34      	ldr	r2, [pc, #208]	; (8000e90 <HAL_DMA_Abort_IT+0x1e4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d048      	beq.n	8000e54 <HAL_DMA_Abort_IT+0x1a8>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a33      	ldr	r2, [pc, #204]	; (8000e94 <HAL_DMA_Abort_IT+0x1e8>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d040      	beq.n	8000e4e <HAL_DMA_Abort_IT+0x1a2>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a31      	ldr	r2, [pc, #196]	; (8000e98 <HAL_DMA_Abort_IT+0x1ec>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d038      	beq.n	8000e48 <HAL_DMA_Abort_IT+0x19c>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a30      	ldr	r2, [pc, #192]	; (8000e9c <HAL_DMA_Abort_IT+0x1f0>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d030      	beq.n	8000e42 <HAL_DMA_Abort_IT+0x196>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a2e      	ldr	r2, [pc, #184]	; (8000ea0 <HAL_DMA_Abort_IT+0x1f4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d028      	beq.n	8000e3c <HAL_DMA_Abort_IT+0x190>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a26      	ldr	r2, [pc, #152]	; (8000e88 <HAL_DMA_Abort_IT+0x1dc>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d020      	beq.n	8000e36 <HAL_DMA_Abort_IT+0x18a>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a2a      	ldr	r2, [pc, #168]	; (8000ea4 <HAL_DMA_Abort_IT+0x1f8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d019      	beq.n	8000e32 <HAL_DMA_Abort_IT+0x186>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a29      	ldr	r2, [pc, #164]	; (8000ea8 <HAL_DMA_Abort_IT+0x1fc>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d012      	beq.n	8000e2e <HAL_DMA_Abort_IT+0x182>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a27      	ldr	r2, [pc, #156]	; (8000eac <HAL_DMA_Abort_IT+0x200>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d00a      	beq.n	8000e28 <HAL_DMA_Abort_IT+0x17c>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a26      	ldr	r2, [pc, #152]	; (8000eb0 <HAL_DMA_Abort_IT+0x204>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d102      	bne.n	8000e22 <HAL_DMA_Abort_IT+0x176>
 8000e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e20:	e01b      	b.n	8000e5a <HAL_DMA_Abort_IT+0x1ae>
 8000e22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e26:	e018      	b.n	8000e5a <HAL_DMA_Abort_IT+0x1ae>
 8000e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2c:	e015      	b.n	8000e5a <HAL_DMA_Abort_IT+0x1ae>
 8000e2e:	2310      	movs	r3, #16
 8000e30:	e013      	b.n	8000e5a <HAL_DMA_Abort_IT+0x1ae>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e011      	b.n	8000e5a <HAL_DMA_Abort_IT+0x1ae>
 8000e36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e3a:	e00e      	b.n	8000e5a <HAL_DMA_Abort_IT+0x1ae>
 8000e3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e40:	e00b      	b.n	8000e5a <HAL_DMA_Abort_IT+0x1ae>
 8000e42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e46:	e008      	b.n	8000e5a <HAL_DMA_Abort_IT+0x1ae>
 8000e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4c:	e005      	b.n	8000e5a <HAL_DMA_Abort_IT+0x1ae>
 8000e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e52:	e002      	b.n	8000e5a <HAL_DMA_Abort_IT+0x1ae>
 8000e54:	2310      	movs	r3, #16
 8000e56:	e000      	b.n	8000e5a <HAL_DMA_Abort_IT+0x1ae>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <HAL_DMA_Abort_IT+0x20c>)
 8000e5c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	4798      	blx	r3
    } 
  }
  return status;
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40020080 	.word	0x40020080
 8000e8c:	40020008 	.word	0x40020008
 8000e90:	4002001c 	.word	0x4002001c
 8000e94:	40020030 	.word	0x40020030
 8000e98:	40020044 	.word	0x40020044
 8000e9c:	40020058 	.word	0x40020058
 8000ea0:	4002006c 	.word	0x4002006c
 8000ea4:	40020408 	.word	0x40020408
 8000ea8:	4002041c 	.word	0x4002041c
 8000eac:	40020430 	.word	0x40020430
 8000eb0:	40020444 	.word	0x40020444
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40020000 	.word	0x40020000

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b08b      	sub	sp, #44	; 0x2c
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ece:	e169      	b.n	80011a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	69fa      	ldr	r2, [r7, #28]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	f040 8158 	bne.w	800119e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	4a9a      	ldr	r2, [pc, #616]	; (800115c <HAL_GPIO_Init+0x2a0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d05e      	beq.n	8000fb6 <HAL_GPIO_Init+0xfa>
 8000ef8:	4a98      	ldr	r2, [pc, #608]	; (800115c <HAL_GPIO_Init+0x2a0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d875      	bhi.n	8000fea <HAL_GPIO_Init+0x12e>
 8000efe:	4a98      	ldr	r2, [pc, #608]	; (8001160 <HAL_GPIO_Init+0x2a4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d058      	beq.n	8000fb6 <HAL_GPIO_Init+0xfa>
 8000f04:	4a96      	ldr	r2, [pc, #600]	; (8001160 <HAL_GPIO_Init+0x2a4>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d86f      	bhi.n	8000fea <HAL_GPIO_Init+0x12e>
 8000f0a:	4a96      	ldr	r2, [pc, #600]	; (8001164 <HAL_GPIO_Init+0x2a8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d052      	beq.n	8000fb6 <HAL_GPIO_Init+0xfa>
 8000f10:	4a94      	ldr	r2, [pc, #592]	; (8001164 <HAL_GPIO_Init+0x2a8>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d869      	bhi.n	8000fea <HAL_GPIO_Init+0x12e>
 8000f16:	4a94      	ldr	r2, [pc, #592]	; (8001168 <HAL_GPIO_Init+0x2ac>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d04c      	beq.n	8000fb6 <HAL_GPIO_Init+0xfa>
 8000f1c:	4a92      	ldr	r2, [pc, #584]	; (8001168 <HAL_GPIO_Init+0x2ac>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d863      	bhi.n	8000fea <HAL_GPIO_Init+0x12e>
 8000f22:	4a92      	ldr	r2, [pc, #584]	; (800116c <HAL_GPIO_Init+0x2b0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d046      	beq.n	8000fb6 <HAL_GPIO_Init+0xfa>
 8000f28:	4a90      	ldr	r2, [pc, #576]	; (800116c <HAL_GPIO_Init+0x2b0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d85d      	bhi.n	8000fea <HAL_GPIO_Init+0x12e>
 8000f2e:	2b12      	cmp	r3, #18
 8000f30:	d82a      	bhi.n	8000f88 <HAL_GPIO_Init+0xcc>
 8000f32:	2b12      	cmp	r3, #18
 8000f34:	d859      	bhi.n	8000fea <HAL_GPIO_Init+0x12e>
 8000f36:	a201      	add	r2, pc, #4	; (adr r2, 8000f3c <HAL_GPIO_Init+0x80>)
 8000f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3c:	08000fb7 	.word	0x08000fb7
 8000f40:	08000f91 	.word	0x08000f91
 8000f44:	08000fa3 	.word	0x08000fa3
 8000f48:	08000fe5 	.word	0x08000fe5
 8000f4c:	08000feb 	.word	0x08000feb
 8000f50:	08000feb 	.word	0x08000feb
 8000f54:	08000feb 	.word	0x08000feb
 8000f58:	08000feb 	.word	0x08000feb
 8000f5c:	08000feb 	.word	0x08000feb
 8000f60:	08000feb 	.word	0x08000feb
 8000f64:	08000feb 	.word	0x08000feb
 8000f68:	08000feb 	.word	0x08000feb
 8000f6c:	08000feb 	.word	0x08000feb
 8000f70:	08000feb 	.word	0x08000feb
 8000f74:	08000feb 	.word	0x08000feb
 8000f78:	08000feb 	.word	0x08000feb
 8000f7c:	08000feb 	.word	0x08000feb
 8000f80:	08000f99 	.word	0x08000f99
 8000f84:	08000fad 	.word	0x08000fad
 8000f88:	4a79      	ldr	r2, [pc, #484]	; (8001170 <HAL_GPIO_Init+0x2b4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d013      	beq.n	8000fb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f8e:	e02c      	b.n	8000fea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	623b      	str	r3, [r7, #32]
          break;
 8000f96:	e029      	b.n	8000fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	623b      	str	r3, [r7, #32]
          break;
 8000fa0:	e024      	b.n	8000fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	3308      	adds	r3, #8
 8000fa8:	623b      	str	r3, [r7, #32]
          break;
 8000faa:	e01f      	b.n	8000fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	330c      	adds	r3, #12
 8000fb2:	623b      	str	r3, [r7, #32]
          break;
 8000fb4:	e01a      	b.n	8000fec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d102      	bne.n	8000fc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	623b      	str	r3, [r7, #32]
          break;
 8000fc2:	e013      	b.n	8000fec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d105      	bne.n	8000fd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	611a      	str	r2, [r3, #16]
          break;
 8000fd6:	e009      	b.n	8000fec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fd8:	2308      	movs	r3, #8
 8000fda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69fa      	ldr	r2, [r7, #28]
 8000fe0:	615a      	str	r2, [r3, #20]
          break;
 8000fe2:	e003      	b.n	8000fec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
          break;
 8000fe8:	e000      	b.n	8000fec <HAL_GPIO_Init+0x130>
          break;
 8000fea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	2bff      	cmp	r3, #255	; 0xff
 8000ff0:	d801      	bhi.n	8000ff6 <HAL_GPIO_Init+0x13a>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	e001      	b.n	8000ffa <HAL_GPIO_Init+0x13e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	2bff      	cmp	r3, #255	; 0xff
 8001000:	d802      	bhi.n	8001008 <HAL_GPIO_Init+0x14c>
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	e002      	b.n	800100e <HAL_GPIO_Init+0x152>
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	3b08      	subs	r3, #8
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	210f      	movs	r1, #15
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	fa01 f303 	lsl.w	r3, r1, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	401a      	ands	r2, r3
 8001020:	6a39      	ldr	r1, [r7, #32]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	431a      	orrs	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 80b1 	beq.w	800119e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800103c:	4b4d      	ldr	r3, [pc, #308]	; (8001174 <HAL_GPIO_Init+0x2b8>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a4c      	ldr	r2, [pc, #304]	; (8001174 <HAL_GPIO_Init+0x2b8>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b4a      	ldr	r3, [pc, #296]	; (8001174 <HAL_GPIO_Init+0x2b8>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001054:	4a48      	ldr	r2, [pc, #288]	; (8001178 <HAL_GPIO_Init+0x2bc>)
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	3302      	adds	r3, #2
 800105c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001060:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	4013      	ands	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a40      	ldr	r2, [pc, #256]	; (800117c <HAL_GPIO_Init+0x2c0>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d013      	beq.n	80010a8 <HAL_GPIO_Init+0x1ec>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a3f      	ldr	r2, [pc, #252]	; (8001180 <HAL_GPIO_Init+0x2c4>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d00d      	beq.n	80010a4 <HAL_GPIO_Init+0x1e8>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a3e      	ldr	r2, [pc, #248]	; (8001184 <HAL_GPIO_Init+0x2c8>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d007      	beq.n	80010a0 <HAL_GPIO_Init+0x1e4>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a3d      	ldr	r2, [pc, #244]	; (8001188 <HAL_GPIO_Init+0x2cc>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d101      	bne.n	800109c <HAL_GPIO_Init+0x1e0>
 8001098:	2303      	movs	r3, #3
 800109a:	e006      	b.n	80010aa <HAL_GPIO_Init+0x1ee>
 800109c:	2304      	movs	r3, #4
 800109e:	e004      	b.n	80010aa <HAL_GPIO_Init+0x1ee>
 80010a0:	2302      	movs	r3, #2
 80010a2:	e002      	b.n	80010aa <HAL_GPIO_Init+0x1ee>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <HAL_GPIO_Init+0x1ee>
 80010a8:	2300      	movs	r3, #0
 80010aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ac:	f002 0203 	and.w	r2, r2, #3
 80010b0:	0092      	lsls	r2, r2, #2
 80010b2:	4093      	lsls	r3, r2
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010ba:	492f      	ldr	r1, [pc, #188]	; (8001178 <HAL_GPIO_Init+0x2bc>)
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3302      	adds	r3, #2
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <HAL_GPIO_Init+0x2d0>)
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	492c      	ldr	r1, [pc, #176]	; (800118c <HAL_GPIO_Init+0x2d0>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	608b      	str	r3, [r1, #8]
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_GPIO_Init+0x2d0>)
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	4928      	ldr	r1, [pc, #160]	; (800118c <HAL_GPIO_Init+0x2d0>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <HAL_GPIO_Init+0x2d0>)
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	4922      	ldr	r1, [pc, #136]	; (800118c <HAL_GPIO_Init+0x2d0>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	60cb      	str	r3, [r1, #12]
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <HAL_GPIO_Init+0x2d0>)
 800110c:	68da      	ldr	r2, [r3, #12]
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	43db      	mvns	r3, r3
 8001112:	491e      	ldr	r1, [pc, #120]	; (800118c <HAL_GPIO_Init+0x2d0>)
 8001114:	4013      	ands	r3, r2
 8001116:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_GPIO_Init+0x2d0>)
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	4918      	ldr	r1, [pc, #96]	; (800118c <HAL_GPIO_Init+0x2d0>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
 8001130:	e006      	b.n	8001140 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <HAL_GPIO_Init+0x2d0>)
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	43db      	mvns	r3, r3
 800113a:	4914      	ldr	r1, [pc, #80]	; (800118c <HAL_GPIO_Init+0x2d0>)
 800113c:	4013      	ands	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d021      	beq.n	8001190 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_GPIO_Init+0x2d0>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	490e      	ldr	r1, [pc, #56]	; (800118c <HAL_GPIO_Init+0x2d0>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	600b      	str	r3, [r1, #0]
 8001158:	e021      	b.n	800119e <HAL_GPIO_Init+0x2e2>
 800115a:	bf00      	nop
 800115c:	10320000 	.word	0x10320000
 8001160:	10310000 	.word	0x10310000
 8001164:	10220000 	.word	0x10220000
 8001168:	10210000 	.word	0x10210000
 800116c:	10120000 	.word	0x10120000
 8001170:	10110000 	.word	0x10110000
 8001174:	40021000 	.word	0x40021000
 8001178:	40010000 	.word	0x40010000
 800117c:	40010800 	.word	0x40010800
 8001180:	40010c00 	.word	0x40010c00
 8001184:	40011000 	.word	0x40011000
 8001188:	40011400 	.word	0x40011400
 800118c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_GPIO_Init+0x304>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	43db      	mvns	r3, r3
 8001198:	4909      	ldr	r1, [pc, #36]	; (80011c0 <HAL_GPIO_Init+0x304>)
 800119a:	4013      	ands	r3, r2
 800119c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	3301      	adds	r3, #1
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	fa22 f303 	lsr.w	r3, r2, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f47f ae8e 	bne.w	8000ed0 <HAL_GPIO_Init+0x14>
  }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	372c      	adds	r7, #44	; 0x2c
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	40010400 	.word	0x40010400

080011c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
 80011d0:	4613      	mov	r3, r2
 80011d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d4:	787b      	ldrb	r3, [r7, #1]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011e0:	e003      	b.n	80011ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	041a      	lsls	r2, r3, #16
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	611a      	str	r2, [r3, #16]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4013      	ands	r3, r2
 800120c:	041a      	lsls	r2, r3, #16
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43d9      	mvns	r1, r3
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	400b      	ands	r3, r1
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	611a      	str	r2, [r3, #16]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
	...

08001228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e304      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 8087 	beq.w	8001356 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001248:	4b92      	ldr	r3, [pc, #584]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b04      	cmp	r3, #4
 8001252:	d00c      	beq.n	800126e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001254:	4b8f      	ldr	r3, [pc, #572]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b08      	cmp	r3, #8
 800125e:	d112      	bne.n	8001286 <HAL_RCC_OscConfig+0x5e>
 8001260:	4b8c      	ldr	r3, [pc, #560]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126c:	d10b      	bne.n	8001286 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126e:	4b89      	ldr	r3, [pc, #548]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d06c      	beq.n	8001354 <HAL_RCC_OscConfig+0x12c>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d168      	bne.n	8001354 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e2de      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800128e:	d106      	bne.n	800129e <HAL_RCC_OscConfig+0x76>
 8001290:	4b80      	ldr	r3, [pc, #512]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a7f      	ldr	r2, [pc, #508]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	e02e      	b.n	80012fc <HAL_RCC_OscConfig+0xd4>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x98>
 80012a6:	4b7b      	ldr	r3, [pc, #492]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a7a      	ldr	r2, [pc, #488]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b78      	ldr	r3, [pc, #480]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a77      	ldr	r2, [pc, #476]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e01d      	b.n	80012fc <HAL_RCC_OscConfig+0xd4>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0xbc>
 80012ca:	4b72      	ldr	r3, [pc, #456]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a71      	ldr	r2, [pc, #452]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b6f      	ldr	r3, [pc, #444]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6e      	ldr	r2, [pc, #440]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0xd4>
 80012e4:	4b6b      	ldr	r3, [pc, #428]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a6a      	ldr	r2, [pc, #424]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b68      	ldr	r3, [pc, #416]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a67      	ldr	r2, [pc, #412]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fb5c 	bl	80009c0 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fb58 	bl	80009c0 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e292      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0xe4>
 800132a:	e014      	b.n	8001356 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fb48 	bl	80009c0 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fb44 	bl	80009c0 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e27e      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	4b53      	ldr	r3, [pc, #332]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x10c>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d063      	beq.n	800142a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001362:	4b4c      	ldr	r3, [pc, #304]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800136e:	4b49      	ldr	r3, [pc, #292]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	2b08      	cmp	r3, #8
 8001378:	d11c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x18c>
 800137a:	4b46      	ldr	r3, [pc, #280]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d116      	bne.n	80013b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	4b43      	ldr	r3, [pc, #268]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_RCC_OscConfig+0x176>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e252      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4939      	ldr	r1, [pc, #228]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	e03a      	b.n	800142a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013bc:	4b36      	ldr	r3, [pc, #216]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c2:	f7ff fafd 	bl	80009c0 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff faf9 	bl	80009c0 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e233      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4927      	ldr	r1, [pc, #156]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fadc 	bl	80009c0 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fad8 	bl	80009c0 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e212      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d03a      	beq.n	80014ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d019      	beq.n	8001472 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_RCC_OscConfig+0x274>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001444:	f7ff fabc 	bl	80009c0 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fab8 	bl	80009c0 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e1f2      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f000 fbca 	bl	8001c04 <RCC_Delay>
 8001470:	e01c      	b.n	80014ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_RCC_OscConfig+0x274>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001478:	f7ff faa2 	bl	80009c0 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147e:	e00f      	b.n	80014a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff fa9e 	bl	80009c0 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d908      	bls.n	80014a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e1d8      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	42420000 	.word	0x42420000
 800149c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b9b      	ldr	r3, [pc, #620]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e9      	bne.n	8001480 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80a6 	beq.w	8001606 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014be:	4b94      	ldr	r3, [pc, #592]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10d      	bne.n	80014e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b91      	ldr	r3, [pc, #580]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4a90      	ldr	r2, [pc, #576]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	61d3      	str	r3, [r2, #28]
 80014d6:	4b8e      	ldr	r3, [pc, #568]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e2:	2301      	movs	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	4b8b      	ldr	r3, [pc, #556]	; (8001714 <HAL_RCC_OscConfig+0x4ec>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d118      	bne.n	8001524 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f2:	4b88      	ldr	r3, [pc, #544]	; (8001714 <HAL_RCC_OscConfig+0x4ec>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a87      	ldr	r2, [pc, #540]	; (8001714 <HAL_RCC_OscConfig+0x4ec>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fa5f 	bl	80009c0 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001506:	f7ff fa5b 	bl	80009c0 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b64      	cmp	r3, #100	; 0x64
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e195      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	4b7e      	ldr	r3, [pc, #504]	; (8001714 <HAL_RCC_OscConfig+0x4ec>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d106      	bne.n	800153a <HAL_RCC_OscConfig+0x312>
 800152c:	4b78      	ldr	r3, [pc, #480]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4a77      	ldr	r2, [pc, #476]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6213      	str	r3, [r2, #32]
 8001538:	e02d      	b.n	8001596 <HAL_RCC_OscConfig+0x36e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x334>
 8001542:	4b73      	ldr	r3, [pc, #460]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a72      	ldr	r2, [pc, #456]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6213      	str	r3, [r2, #32]
 800154e:	4b70      	ldr	r3, [pc, #448]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4a6f      	ldr	r2, [pc, #444]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001554:	f023 0304 	bic.w	r3, r3, #4
 8001558:	6213      	str	r3, [r2, #32]
 800155a:	e01c      	b.n	8001596 <HAL_RCC_OscConfig+0x36e>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	2b05      	cmp	r3, #5
 8001562:	d10c      	bne.n	800157e <HAL_RCC_OscConfig+0x356>
 8001564:	4b6a      	ldr	r3, [pc, #424]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4a69      	ldr	r2, [pc, #420]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6213      	str	r3, [r2, #32]
 8001570:	4b67      	ldr	r3, [pc, #412]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4a66      	ldr	r2, [pc, #408]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	e00b      	b.n	8001596 <HAL_RCC_OscConfig+0x36e>
 800157e:	4b64      	ldr	r3, [pc, #400]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	4a63      	ldr	r2, [pc, #396]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6213      	str	r3, [r2, #32]
 800158a:	4b61      	ldr	r3, [pc, #388]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4a60      	ldr	r2, [pc, #384]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d015      	beq.n	80015ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159e:	f7ff fa0f 	bl	80009c0 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff fa0b 	bl	80009c0 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e143      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015bc:	4b54      	ldr	r3, [pc, #336]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0ee      	beq.n	80015a6 <HAL_RCC_OscConfig+0x37e>
 80015c8:	e014      	b.n	80015f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff f9f9 	bl	80009c0 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7ff f9f5 	bl	80009c0 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e12d      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e8:	4b49      	ldr	r3, [pc, #292]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ee      	bne.n	80015d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d105      	bne.n	8001606 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015fa:	4b45      	ldr	r3, [pc, #276]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a44      	ldr	r2, [pc, #272]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001604:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 808c 	beq.w	8001728 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161c:	d10e      	bne.n	800163c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800161e:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001626:	2b08      	cmp	r3, #8
 8001628:	d108      	bne.n	800163c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800162a:	4b39      	ldr	r3, [pc, #228]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001636:	d101      	bne.n	800163c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e103      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	2b02      	cmp	r3, #2
 8001642:	d14e      	bne.n	80016e2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001644:	4b32      	ldr	r3, [pc, #200]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d009      	beq.n	8001664 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001650:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0ef      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001664:	4b2c      	ldr	r3, [pc, #176]	; (8001718 <HAL_RCC_OscConfig+0x4f0>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff f9a9 	bl	80009c0 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001672:	f7ff f9a5 	bl	80009c0 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b64      	cmp	r3, #100	; 0x64
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e0df      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001684:	4b22      	ldr	r3, [pc, #136]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f0      	bne.n	8001672 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169c:	491c      	ldr	r1, [pc, #112]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4918      	ldr	r1, [pc, #96]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_RCC_OscConfig+0x4f0>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff f981 	bl	80009c0 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80016c2:	f7ff f97d 	bl	80009c0 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b64      	cmp	r3, #100	; 0x64
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e0b7      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x49a>
 80016e0:	e022      	b.n	8001728 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <HAL_RCC_OscConfig+0x4e8>)
 80016e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_RCC_OscConfig+0x4f0>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff f964 	bl	80009c0 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80016fa:	e00f      	b.n	800171c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80016fc:	f7ff f960 	bl	80009c0 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d908      	bls.n	800171c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e09a      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000
 8001714:	40007000 	.word	0x40007000
 8001718:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800171c:	4b4b      	ldr	r3, [pc, #300]	; (800184c <HAL_RCC_OscConfig+0x624>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e9      	bne.n	80016fc <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 8088 	beq.w	8001842 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001732:	4b46      	ldr	r3, [pc, #280]	; (800184c <HAL_RCC_OscConfig+0x624>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b08      	cmp	r3, #8
 800173c:	d068      	beq.n	8001810 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d14d      	bne.n	80017e2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001746:	4b42      	ldr	r3, [pc, #264]	; (8001850 <HAL_RCC_OscConfig+0x628>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff f938 	bl	80009c0 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001754:	f7ff f934 	bl	80009c0 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e06e      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001766:	4b39      	ldr	r3, [pc, #228]	; (800184c <HAL_RCC_OscConfig+0x624>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177a:	d10f      	bne.n	800179c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800177c:	4b33      	ldr	r3, [pc, #204]	; (800184c <HAL_RCC_OscConfig+0x624>)
 800177e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	4931      	ldr	r1, [pc, #196]	; (800184c <HAL_RCC_OscConfig+0x624>)
 8001786:	4313      	orrs	r3, r2
 8001788:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800178a:	4b30      	ldr	r3, [pc, #192]	; (800184c <HAL_RCC_OscConfig+0x624>)
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	f023 020f 	bic.w	r2, r3, #15
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	492d      	ldr	r1, [pc, #180]	; (800184c <HAL_RCC_OscConfig+0x624>)
 8001798:	4313      	orrs	r3, r2
 800179a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_RCC_OscConfig+0x624>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	430b      	orrs	r3, r1
 80017ae:	4927      	ldr	r1, [pc, #156]	; (800184c <HAL_RCC_OscConfig+0x624>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <HAL_RCC_OscConfig+0x628>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff f901 	bl	80009c0 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c2:	f7ff f8fd 	bl	80009c0 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e037      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_RCC_OscConfig+0x624>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x59a>
 80017e0:	e02f      	b.n	8001842 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_RCC_OscConfig+0x628>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff f8ea 	bl	80009c0 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff f8e6 	bl	80009c0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e020      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_RCC_OscConfig+0x624>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x5c8>
 800180e:	e018      	b.n	8001842 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e013      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_RCC_OscConfig+0x624>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	429a      	cmp	r2, r3
 800182e:	d106      	bne.n	800183e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d001      	beq.n	8001842 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000
 8001850:	42420060 	.word	0x42420060

08001854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0d0      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001868:	4b6a      	ldr	r3, [pc, #424]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d910      	bls.n	8001898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b67      	ldr	r3, [pc, #412]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 0207 	bic.w	r2, r3, #7
 800187e:	4965      	ldr	r1, [pc, #404]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b63      	ldr	r3, [pc, #396]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0b8      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b0:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c8:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d4:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	494d      	ldr	r1, [pc, #308]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d040      	beq.n	8001974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d115      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e07f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001912:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e073      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001922:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e06b      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001932:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f023 0203 	bic.w	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4936      	ldr	r1, [pc, #216]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001944:	f7ff f83c 	bl	80009c0 <HAL_GetTick>
 8001948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	e00a      	b.n	8001962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194c:	f7ff f838 	bl	80009c0 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e053      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 020c 	and.w	r2, r3, #12
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	429a      	cmp	r2, r3
 8001972:	d1eb      	bne.n	800194c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d210      	bcs.n	80019a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 0207 	bic.w	r2, r3, #7
 800198a:	4922      	ldr	r1, [pc, #136]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e032      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4916      	ldr	r1, [pc, #88]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	490e      	ldr	r1, [pc, #56]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019e2:	f000 f821 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80019e6:	4602      	mov	r2, r0
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	490a      	ldr	r1, [pc, #40]	; (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80019f4:	5ccb      	ldrb	r3, [r1, r3]
 80019f6:	fa22 f303 	lsr.w	r3, r2, r3
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1cc>)
 80019fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_ClockConfig+0x1d0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe ff9a 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40022000 	.word	0x40022000
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08002a1c 	.word	0x08002a1c
 8001a20:	20000020 	.word	0x20000020
 8001a24:	20000024 	.word	0x20000024

08001a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a2c:	b08e      	sub	sp, #56	; 0x38
 8001a2e:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a34:	2300      	movs	r3, #0
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a38:	2300      	movs	r3, #0
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	623b      	str	r3, [r7, #32]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a4c:	4b4e      	ldr	r3, [pc, #312]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	f003 030c 	and.w	r3, r3, #12
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d002      	beq.n	8001a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d003      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x40>
 8001a60:	e089      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a62:	4b4a      	ldr	r3, [pc, #296]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x164>)
 8001a64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a66:	e089      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6a:	0c9b      	lsrs	r3, r3, #18
 8001a6c:	f003 020f 	and.w	r2, r3, #15
 8001a70:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a72:	5c9b      	ldrb	r3, [r3, r2]
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d072      	beq.n	8001b66 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001a80:	4b41      	ldr	r3, [pc, #260]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	f003 020f 	and.w	r2, r3, #15
 8001a88:	4b42      	ldr	r3, [pc, #264]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001a8a:	5c9b      	ldrb	r3, [r3, r2]
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001a8e:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d053      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001aa8:	4b37      	ldr	r3, [pc, #220]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	469a      	mov	sl, r3
 8001abc:	4693      	mov	fp, r2
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	617a      	str	r2, [r7, #20]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	fb03 f20b 	mul.w	r2, r3, fp
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fb0a f303 	mul.w	r3, sl, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	fbaa 0102 	umull	r0, r1, sl, r2
 8001ada:	440b      	add	r3, r1
 8001adc:	4619      	mov	r1, r3
 8001ade:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x164>)
 8001ae0:	fb03 f201 	mul.w	r2, r3, r1
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	fb00 f303 	mul.w	r3, r0, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	4a27      	ldr	r2, [pc, #156]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x164>)
 8001aee:	fba0 4502 	umull	r4, r5, r0, r2
 8001af2:	442b      	add	r3, r5
 8001af4:	461d      	mov	r5, r3
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	2200      	movs	r2, #0
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	60fa      	str	r2, [r7, #12]
 8001afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b00:	2200      	movs	r2, #0
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001b10:	4652      	mov	r2, sl
 8001b12:	fb02 f203 	mul.w	r2, r2, r3
 8001b16:	465b      	mov	r3, fp
 8001b18:	4684      	mov	ip, r0
 8001b1a:	fb0c f303 	mul.w	r3, ip, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	4602      	mov	r2, r0
 8001b22:	4651      	mov	r1, sl
 8001b24:	fba2 8901 	umull	r8, r9, r2, r1
 8001b28:	444b      	add	r3, r9
 8001b2a:	4699      	mov	r9, r3
 8001b2c:	4642      	mov	r2, r8
 8001b2e:	464b      	mov	r3, r9
 8001b30:	4620      	mov	r0, r4
 8001b32:	4629      	mov	r1, r5
 8001b34:	f7fe fb76 	bl	8000224 <__aeabi_uldivmod>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b40:	e007      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x164>)
 8001b46:	fb03 f202 	mul.w	r2, r3, r2
 8001b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x168>)
 8001b54:	7b5b      	ldrb	r3, [r3, #13]
 8001b56:	461a      	mov	r2, r3
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d108      	bne.n	8001b70 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8001b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
 8001b64:	e004      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x170>)
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8001b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b74:	e002      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x174>)
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3738      	adds	r7, #56	; 0x38
 8001b82:	46bd      	mov	sp, r7
 8001b84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	017d7840 	.word	0x017d7840
 8001b90:	08002a34 	.word	0x08002a34
 8001b94:	08002a44 	.word	0x08002a44
 8001b98:	003d0900 	.word	0x003d0900
 8001b9c:	007a1200 	.word	0x007a1200

08001ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba4:	4b02      	ldr	r3, [pc, #8]	; (8001bb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	20000020 	.word	0x20000020

08001bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bb8:	f7ff fff2 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	4903      	ldr	r1, [pc, #12]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	08002a2c 	.word	0x08002a2c

08001bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001be0:	f7ff ffde 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	0adb      	lsrs	r3, r3, #11
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	4903      	ldr	r1, [pc, #12]	; (8001c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bf2:	5ccb      	ldrb	r3, [r1, r3]
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	08002a2c 	.word	0x08002a2c

08001c04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <RCC_Delay+0x34>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <RCC_Delay+0x38>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	0a5b      	lsrs	r3, r3, #9
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c20:	bf00      	nop
  }
  while (Delay --);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1e5a      	subs	r2, r3, #1
 8001c26:	60fa      	str	r2, [r7, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f9      	bne.n	8001c20 <RCC_Delay+0x1c>
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	20000020 	.word	0x20000020
 8001c3c:	10624dd3 	.word	0x10624dd3

08001c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e042      	b.n	8001cd8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe fd92 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2224      	movs	r2, #36	; 0x24
 8001c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 fe03 	bl	8002890 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	4613      	mov	r3, r2
 8001cee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d16d      	bne.n	8001ddc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <HAL_UART_Transmit+0x2c>
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e066      	b.n	8001dde <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2221      	movs	r2, #33	; 0x21
 8001d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d1e:	f7fe fe4f 	bl	80009c0 <HAL_GetTick>
 8001d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	88fa      	ldrh	r2, [r7, #6]
 8001d28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	88fa      	ldrh	r2, [r7, #6]
 8001d2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d38:	d108      	bne.n	8001d4c <HAL_UART_Transmit+0x6c>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d104      	bne.n	8001d4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	e003      	b.n	8001d54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d54:	e02a      	b.n	8001dac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2180      	movs	r1, #128	; 0x80
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 fb8b 	bl	800247c <UART_WaitOnFlagUntilTimeout>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e036      	b.n	8001dde <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10b      	bne.n	8001d8e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	3302      	adds	r3, #2
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	e007      	b.n	8001d9e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	781a      	ldrb	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1cf      	bne.n	8001d56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2140      	movs	r1, #64	; 0x40
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 fb5b 	bl	800247c <UART_WaitOnFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e006      	b.n	8001dde <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e000      	b.n	8001dde <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001ddc:	2302      	movs	r3, #2
  }
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b08a      	sub	sp, #40	; 0x28
 8001dea:	af02      	add	r7, sp, #8
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	4613      	mov	r3, r2
 8001df4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	d17c      	bne.n	8001f00 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HAL_UART_Receive+0x2c>
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e075      	b.n	8001f02 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2222      	movs	r2, #34	; 0x22
 8001e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e2a:	f7fe fdc9 	bl	80009c0 <HAL_GetTick>
 8001e2e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	88fa      	ldrh	r2, [r7, #6]
 8001e34:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	88fa      	ldrh	r2, [r7, #6]
 8001e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e44:	d108      	bne.n	8001e58 <HAL_UART_Receive+0x72>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d104      	bne.n	8001e58 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	e003      	b.n	8001e60 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001e60:	e043      	b.n	8001eea <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2120      	movs	r1, #32
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 fb05 	bl	800247c <UART_WaitOnFlagUntilTimeout>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e042      	b.n	8001f02 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10c      	bne.n	8001e9c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	3302      	adds	r3, #2
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	e01f      	b.n	8001edc <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea4:	d007      	beq.n	8001eb6 <HAL_UART_Receive+0xd0>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10a      	bne.n	8001ec4 <HAL_UART_Receive+0xde>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	e008      	b.n	8001ed6 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1b6      	bne.n	8001e62 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	e000      	b.n	8001f02 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f00:	2302      	movs	r3, #2
  }
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3720      	adds	r7, #32
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b0ba      	sub	sp, #232	; 0xe8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10f      	bne.n	8001f72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f56:	f003 0320 	and.w	r3, r3, #32
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d009      	beq.n	8001f72 <HAL_UART_IRQHandler+0x66>
 8001f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fbd1 	bl	8002712 <UART_Receive_IT>
      return;
 8001f70:	e25b      	b.n	800242a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80de 	beq.w	8002138 <HAL_UART_IRQHandler+0x22c>
 8001f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d106      	bne.n	8001f96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80d1 	beq.w	8002138 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_UART_IRQHandler+0xae>
 8001fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f043 0201 	orr.w	r2, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_UART_IRQHandler+0xd2>
 8001fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f043 0202 	orr.w	r2, r3, #2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00b      	beq.n	8002002 <HAL_UART_IRQHandler+0xf6>
 8001fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f043 0204 	orr.w	r2, r3, #4
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d011      	beq.n	8002032 <HAL_UART_IRQHandler+0x126>
 800200e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800201a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f043 0208 	orr.w	r2, r3, #8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 81f2 	beq.w	8002420 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800203c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002040:	f003 0320 	and.w	r3, r3, #32
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_UART_IRQHandler+0x14e>
 8002048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 fb5c 	bl	8002712 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf14      	ite	ne
 8002068:	2301      	movne	r3, #1
 800206a:	2300      	moveq	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d103      	bne.n	8002086 <HAL_UART_IRQHandler+0x17a>
 800207e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002082:	2b00      	cmp	r3, #0
 8002084:	d04f      	beq.n	8002126 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fa66 	bl	8002558 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d041      	beq.n	800211e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3314      	adds	r3, #20
 80020a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020a8:	e853 3f00 	ldrex	r3, [r3]
 80020ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80020b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3314      	adds	r3, #20
 80020c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80020c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80020ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80020d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80020d6:	e841 2300 	strex	r3, r2, [r1]
 80020da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80020de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1d9      	bne.n	800209a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d013      	beq.n	8002116 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f2:	4a7e      	ldr	r2, [pc, #504]	; (80022ec <HAL_UART_IRQHandler+0x3e0>)
 80020f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fdd6 	bl	8000cac <HAL_DMA_Abort_IT>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d016      	beq.n	8002134 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002110:	4610      	mov	r0, r2
 8002112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002114:	e00e      	b.n	8002134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f99c 	bl	8002454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800211c:	e00a      	b.n	8002134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f998 	bl	8002454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002124:	e006      	b.n	8002134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f994 	bl	8002454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002132:	e175      	b.n	8002420 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002134:	bf00      	nop
    return;
 8002136:	e173      	b.n	8002420 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	2b01      	cmp	r3, #1
 800213e:	f040 814f 	bne.w	80023e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8148 	beq.w	80023e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8141 	beq.w	80023e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80b6 	beq.w	80022f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002190:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 8145 	beq.w	8002424 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800219e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80021a2:	429a      	cmp	r2, r3
 80021a4:	f080 813e 	bcs.w	8002424 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80021ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	f000 8088 	beq.w	80022cc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	330c      	adds	r3, #12
 80021c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021ca:	e853 3f00 	ldrex	r3, [r3]
 80021ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80021d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	330c      	adds	r3, #12
 80021e4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80021e8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80021f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021f8:	e841 2300 	strex	r3, r2, [r1]
 80021fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1d9      	bne.n	80021bc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3314      	adds	r3, #20
 800220e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002212:	e853 3f00 	ldrex	r3, [r3]
 8002216:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800221a:	f023 0301 	bic.w	r3, r3, #1
 800221e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3314      	adds	r3, #20
 8002228:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800222c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002230:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002232:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002234:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002238:	e841 2300 	strex	r3, r2, [r1]
 800223c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800223e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1e1      	bne.n	8002208 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3314      	adds	r3, #20
 800224a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800224c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800224e:	e853 3f00 	ldrex	r3, [r3]
 8002252:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800225a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3314      	adds	r3, #20
 8002264:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002268:	66fa      	str	r2, [r7, #108]	; 0x6c
 800226a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800226c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800226e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002270:	e841 2300 	strex	r3, r2, [r1]
 8002274:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002276:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1e3      	bne.n	8002244 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	330c      	adds	r3, #12
 8002290:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002294:	e853 3f00 	ldrex	r3, [r3]
 8002298:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800229a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229c:	f023 0310 	bic.w	r3, r3, #16
 80022a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	330c      	adds	r3, #12
 80022aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80022ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80022b0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022b6:	e841 2300 	strex	r3, r2, [r1]
 80022ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80022bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1e3      	bne.n	800228a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fcb5 	bl	8000c36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022da:	b29b      	uxth	r3, r3
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4619      	mov	r1, r3
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f8bf 	bl	8002466 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022e8:	e09c      	b.n	8002424 <HAL_UART_IRQHandler+0x518>
 80022ea:	bf00      	nop
 80022ec:	0800261d 	.word	0x0800261d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002304:	b29b      	uxth	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 808e 	beq.w	8002428 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800230c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 8089 	beq.w	8002428 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	330c      	adds	r3, #12
 800231c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002320:	e853 3f00 	ldrex	r3, [r3]
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800232c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	330c      	adds	r3, #12
 8002336:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800233a:	647a      	str	r2, [r7, #68]	; 0x44
 800233c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800233e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002342:	e841 2300 	strex	r3, r2, [r1]
 8002346:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1e3      	bne.n	8002316 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3314      	adds	r3, #20
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	e853 3f00 	ldrex	r3, [r3]
 800235c:	623b      	str	r3, [r7, #32]
   return(result);
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3314      	adds	r3, #20
 800236e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002372:	633a      	str	r2, [r7, #48]	; 0x30
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800237a:	e841 2300 	strex	r3, r2, [r1]
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1e3      	bne.n	800234e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	330c      	adds	r3, #12
 800239a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	e853 3f00 	ldrex	r3, [r3]
 80023a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 0310 	bic.w	r3, r3, #16
 80023aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	330c      	adds	r3, #12
 80023b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80023b8:	61fa      	str	r2, [r7, #28]
 80023ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023bc:	69b9      	ldr	r1, [r7, #24]
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	e841 2300 	strex	r3, r2, [r1]
 80023c4:	617b      	str	r3, [r7, #20]
   return(result);
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1e3      	bne.n	8002394 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023d6:	4619      	mov	r1, r3
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f844 	bl	8002466 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023de:	e023      	b.n	8002428 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d009      	beq.n	8002400 <HAL_UART_IRQHandler+0x4f4>
 80023ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f923 	bl	8002644 <UART_Transmit_IT>
    return;
 80023fe:	e014      	b.n	800242a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00e      	beq.n	800242a <HAL_UART_IRQHandler+0x51e>
 800240c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f962 	bl	80026e2 <UART_EndTransmit_IT>
    return;
 800241e:	e004      	b.n	800242a <HAL_UART_IRQHandler+0x51e>
    return;
 8002420:	bf00      	nop
 8002422:	e002      	b.n	800242a <HAL_UART_IRQHandler+0x51e>
      return;
 8002424:	bf00      	nop
 8002426:	e000      	b.n	800242a <HAL_UART_IRQHandler+0x51e>
      return;
 8002428:	bf00      	nop
  }
}
 800242a:	37e8      	adds	r7, #232	; 0xe8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b090      	sub	sp, #64	; 0x40
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800248c:	e050      	b.n	8002530 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002494:	d04c      	beq.n	8002530 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <UART_WaitOnFlagUntilTimeout+0x30>
 800249c:	f7fe fa90 	bl	80009c0 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d241      	bcs.n	8002530 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	330c      	adds	r3, #12
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b6:	e853 3f00 	ldrex	r3, [r3]
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	330c      	adds	r3, #12
 80024ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024cc:	637a      	str	r2, [r7, #52]	; 0x34
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024d4:	e841 2300 	strex	r3, r2, [r1]
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1e5      	bne.n	80024ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	3314      	adds	r3, #20
 80024e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	e853 3f00 	ldrex	r3, [r3]
 80024ee:	613b      	str	r3, [r7, #16]
   return(result);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	3314      	adds	r3, #20
 80024fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002500:	623a      	str	r2, [r7, #32]
 8002502:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002504:	69f9      	ldr	r1, [r7, #28]
 8002506:	6a3a      	ldr	r2, [r7, #32]
 8002508:	e841 2300 	strex	r3, r2, [r1]
 800250c:	61bb      	str	r3, [r7, #24]
   return(result);
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1e5      	bne.n	80024e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e00f      	b.n	8002550 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	4013      	ands	r3, r2
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	429a      	cmp	r2, r3
 800253e:	bf0c      	ite	eq
 8002540:	2301      	moveq	r3, #1
 8002542:	2300      	movne	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	429a      	cmp	r2, r3
 800254c:	d09f      	beq.n	800248e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3740      	adds	r7, #64	; 0x40
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002558:	b480      	push	{r7}
 800255a:	b095      	sub	sp, #84	; 0x54
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	330c      	adds	r3, #12
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256a:	e853 3f00 	ldrex	r3, [r3]
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	330c      	adds	r3, #12
 800257e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002580:	643a      	str	r2, [r7, #64]	; 0x40
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002584:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002586:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002588:	e841 2300 	strex	r3, r2, [r1]
 800258c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e5      	bne.n	8002560 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3314      	adds	r3, #20
 800259a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	e853 3f00 	ldrex	r3, [r3]
 80025a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3314      	adds	r3, #20
 80025b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025bc:	e841 2300 	strex	r3, r2, [r1]
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1e5      	bne.n	8002594 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d119      	bne.n	8002604 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	e853 3f00 	ldrex	r3, [r3]
 80025de:	60bb      	str	r3, [r7, #8]
   return(result);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f023 0310 	bic.w	r3, r3, #16
 80025e6:	647b      	str	r3, [r7, #68]	; 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	330c      	adds	r3, #12
 80025ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025f0:	61ba      	str	r2, [r7, #24]
 80025f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f4:	6979      	ldr	r1, [r7, #20]
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	e841 2300 	strex	r3, r2, [r1]
 80025fc:	613b      	str	r3, [r7, #16]
   return(result);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1e5      	bne.n	80025d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002612:	bf00      	nop
 8002614:	3754      	adds	r7, #84	; 0x54
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff ff0c 	bl	8002454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b21      	cmp	r3, #33	; 0x21
 8002656:	d13e      	bne.n	80026d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002660:	d114      	bne.n	800268c <UART_Transmit_IT+0x48>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d110      	bne.n	800268c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800267e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	1c9a      	adds	r2, r3, #2
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	621a      	str	r2, [r3, #32]
 800268a:	e008      	b.n	800269e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	1c59      	adds	r1, r3, #1
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6211      	str	r1, [r2, #32]
 8002696:	781a      	ldrb	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	4619      	mov	r1, r3
 80026ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026d6:	2302      	movs	r3, #2
  }
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fe94 	bl	8002430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b08c      	sub	sp, #48	; 0x30
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b22      	cmp	r3, #34	; 0x22
 8002724:	f040 80ae 	bne.w	8002884 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002730:	d117      	bne.n	8002762 <UART_Receive_IT+0x50>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d113      	bne.n	8002762 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800273a:	2300      	movs	r3, #0
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	b29b      	uxth	r3, r3
 800274c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002750:	b29a      	uxth	r2, r3
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	1c9a      	adds	r2, r3, #2
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	629a      	str	r2, [r3, #40]	; 0x28
 8002760:	e026      	b.n	80027b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002768:	2300      	movs	r3, #0
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002774:	d007      	beq.n	8002786 <UART_Receive_IT+0x74>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10a      	bne.n	8002794 <UART_Receive_IT+0x82>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	701a      	strb	r2, [r3, #0]
 8002792:	e008      	b.n	80027a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	4619      	mov	r1, r3
 80027be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d15d      	bne.n	8002880 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0220 	bic.w	r2, r2, #32
 80027d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	2b01      	cmp	r3, #1
 8002808:	d135      	bne.n	8002876 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	330c      	adds	r3, #12
 8002816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	e853 3f00 	ldrex	r3, [r3]
 800281e:	613b      	str	r3, [r7, #16]
   return(result);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f023 0310 	bic.w	r3, r3, #16
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002830:	623a      	str	r2, [r7, #32]
 8002832:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002834:	69f9      	ldr	r1, [r7, #28]
 8002836:	6a3a      	ldr	r2, [r7, #32]
 8002838:	e841 2300 	strex	r3, r2, [r1]
 800283c:	61bb      	str	r3, [r7, #24]
   return(result);
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e5      	bne.n	8002810 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b10      	cmp	r3, #16
 8002850:	d10a      	bne.n	8002868 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800286c:	4619      	mov	r1, r3
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fdf9 	bl	8002466 <HAL_UARTEx_RxEventCallback>
 8002874:	e002      	b.n	800287c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff fde3 	bl	8002442 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e002      	b.n	8002886 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002884:	2302      	movs	r3, #2
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3730      	adds	r7, #48	; 0x30
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028ca:	f023 030c 	bic.w	r3, r3, #12
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	430b      	orrs	r3, r1
 80028d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a2c      	ldr	r2, [pc, #176]	; (80029a4 <UART_SetConfig+0x114>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d103      	bne.n	8002900 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028f8:	f7ff f970 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	e002      	b.n	8002906 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002900:	f7ff f958 	bl	8001bb4 <HAL_RCC_GetPCLK1Freq>
 8002904:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	009a      	lsls	r2, r3, #2
 8002910:	441a      	add	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	fbb2 f3f3 	udiv	r3, r2, r3
 800291c:	4a22      	ldr	r2, [pc, #136]	; (80029a8 <UART_SetConfig+0x118>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	0119      	lsls	r1, r3, #4
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	009a      	lsls	r2, r3, #2
 8002930:	441a      	add	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	fbb2 f2f3 	udiv	r2, r2, r3
 800293c:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <UART_SetConfig+0x118>)
 800293e:	fba3 0302 	umull	r0, r3, r3, r2
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	2064      	movs	r0, #100	; 0x64
 8002946:	fb00 f303 	mul.w	r3, r0, r3
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	3332      	adds	r3, #50	; 0x32
 8002950:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <UART_SetConfig+0x118>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800295c:	4419      	add	r1, r3
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	009a      	lsls	r2, r3, #2
 8002968:	441a      	add	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	fbb2 f2f3 	udiv	r2, r2, r3
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <UART_SetConfig+0x118>)
 8002976:	fba3 0302 	umull	r0, r3, r3, r2
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2064      	movs	r0, #100	; 0x64
 800297e:	fb00 f303 	mul.w	r3, r0, r3
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	3332      	adds	r3, #50	; 0x32
 8002988:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <UART_SetConfig+0x118>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	f003 020f 	and.w	r2, r3, #15
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	440a      	add	r2, r1
 800299a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40013800 	.word	0x40013800
 80029a8:	51eb851f 	.word	0x51eb851f

080029ac <memset>:
 80029ac:	4603      	mov	r3, r0
 80029ae:	4402      	add	r2, r0
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d100      	bne.n	80029b6 <memset+0xa>
 80029b4:	4770      	bx	lr
 80029b6:	f803 1b01 	strb.w	r1, [r3], #1
 80029ba:	e7f9      	b.n	80029b0 <memset+0x4>

080029bc <__libc_init_array>:
 80029bc:	b570      	push	{r4, r5, r6, lr}
 80029be:	2600      	movs	r6, #0
 80029c0:	4d0c      	ldr	r5, [pc, #48]	; (80029f4 <__libc_init_array+0x38>)
 80029c2:	4c0d      	ldr	r4, [pc, #52]	; (80029f8 <__libc_init_array+0x3c>)
 80029c4:	1b64      	subs	r4, r4, r5
 80029c6:	10a4      	asrs	r4, r4, #2
 80029c8:	42a6      	cmp	r6, r4
 80029ca:	d109      	bne.n	80029e0 <__libc_init_array+0x24>
 80029cc:	f000 f81a 	bl	8002a04 <_init>
 80029d0:	2600      	movs	r6, #0
 80029d2:	4d0a      	ldr	r5, [pc, #40]	; (80029fc <__libc_init_array+0x40>)
 80029d4:	4c0a      	ldr	r4, [pc, #40]	; (8002a00 <__libc_init_array+0x44>)
 80029d6:	1b64      	subs	r4, r4, r5
 80029d8:	10a4      	asrs	r4, r4, #2
 80029da:	42a6      	cmp	r6, r4
 80029dc:	d105      	bne.n	80029ea <__libc_init_array+0x2e>
 80029de:	bd70      	pop	{r4, r5, r6, pc}
 80029e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e4:	4798      	blx	r3
 80029e6:	3601      	adds	r6, #1
 80029e8:	e7ee      	b.n	80029c8 <__libc_init_array+0xc>
 80029ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ee:	4798      	blx	r3
 80029f0:	3601      	adds	r6, #1
 80029f2:	e7f2      	b.n	80029da <__libc_init_array+0x1e>
 80029f4:	08002a5c 	.word	0x08002a5c
 80029f8:	08002a5c 	.word	0x08002a5c
 80029fc:	08002a5c 	.word	0x08002a5c
 8002a00:	08002a60 	.word	0x08002a60

08002a04 <_init>:
 8002a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a06:	bf00      	nop
 8002a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0a:	bc08      	pop	{r3}
 8002a0c:	469e      	mov	lr, r3
 8002a0e:	4770      	bx	lr

08002a10 <_fini>:
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a12:	bf00      	nop
 8002a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a16:	bc08      	pop	{r3}
 8002a18:	469e      	mov	lr, r3
 8002a1a:	4770      	bx	lr
