
LED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bac  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001d90  08001d90  00011d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dc8  08001dc8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08001dc8  08001dc8  00011dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001dd0  08001dd0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dd0  08001dd0  00011dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dd4  08001dd4  00011dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000010  08001de8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001de8  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   000066d2  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011df  00000000  00000000  0002674e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005f0  00000000  00000000  00027930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000488  00000000  00000000  00027f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001de3e  00000000  00000000  000283a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000074e8  00000000  00000000  000461e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae36b  00000000  00000000  0004d6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000173c  00000000  00000000  000fba3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000fd178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000010 	.word	0x20000010
 8000200:	00000000 	.word	0x00000000
 8000204:	08001d78 	.word	0x08001d78

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000014 	.word	0x20000014
 8000220:	08001d78 	.word	0x08001d78

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b972 	b.w	8000520 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14c      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d967      	bls.n	800033a <__udivmoddi4+0xe6>
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	b153      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000270:	fa02 fc03 	lsl.w	ip, r2, r3
 8000274:	f1c3 0220 	rsb	r2, r3, #32
 8000278:	fa01 fe03 	lsl.w	lr, r1, r3
 800027c:	fa20 f202 	lsr.w	r2, r0, r2
 8000280:	ea42 0e0e 	orr.w	lr, r2, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028a:	fbbe f1f7 	udiv	r1, lr, r7
 800028e:	fa1f f58c 	uxth.w	r5, ip
 8000292:	fb07 ee11 	mls	lr, r7, r1, lr
 8000296:	fb01 f005 	mul.w	r0, r1, r5
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 3eff 	add.w	lr, r1, #4294967295
 80002ac:	f080 8119 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8116 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80002c0:	fb07 2210 	mls	r2, r7, r0, r2
 80002c4:	fb00 f505 	mul.w	r5, r0, r5
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8104 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8101 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	1b64      	subs	r4, r4, r5
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xc0>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ea 	beq.w	80004dc <__udivmoddi4+0x288>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d148      	bne.n	80003ae <__udivmoddi4+0x15a>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xd2>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2c2>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4696      	mov	lr, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa6>
 8000334:	e9c6 4e00 	strd	r4, lr, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa6>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xea>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 808e 	bne.w	8000464 <__udivmoddi4+0x210>
 8000348:	1a88      	subs	r0, r1, r2
 800034a:	2101      	movs	r1, #1
 800034c:	0c17      	lsrs	r7, r2, #16
 800034e:	fa1f fe82 	uxth.w	lr, r2
 8000352:	fbb0 f5f7 	udiv	r5, r0, r7
 8000356:	fb07 0015 	mls	r0, r7, r5, r0
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb0e f005 	mul.w	r0, lr, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x126>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4290      	cmp	r0, r2
 8000374:	f200 80cc 	bhi.w	8000510 <__udivmoddi4+0x2bc>
 8000378:	4645      	mov	r5, r8
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000380:	fb07 2210 	mls	r2, r7, r0, r2
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	45a6      	cmp	lr, r4
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x150>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x14e>
 800039c:	45a6      	cmp	lr, r4
 800039e:	f200 80b4 	bhi.w	800050a <__udivmoddi4+0x2b6>
 80003a2:	4610      	mov	r0, r2
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ac:	e7a0      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003ae:	f1c1 0720 	rsb	r7, r1, #32
 80003b2:	408b      	lsls	r3, r1
 80003b4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003bc:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	fbba f8f9 	udiv	r8, sl, r9
 80003c8:	408d      	lsls	r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	432b      	orrs	r3, r5
 80003d8:	fa00 f501 	lsl.w	r5, r0, r1
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	0c1c      	lsrs	r4, r3, #16
 80003e2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003e6:	42a0      	cmp	r0, r4
 80003e8:	fa02 f201 	lsl.w	r2, r2, r1
 80003ec:	d90b      	bls.n	8000406 <__udivmoddi4+0x1b2>
 80003ee:	eb1c 0404 	adds.w	r4, ip, r4
 80003f2:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f6:	f080 8086 	bcs.w	8000506 <__udivmoddi4+0x2b2>
 80003fa:	42a0      	cmp	r0, r4
 80003fc:	f240 8083 	bls.w	8000506 <__udivmoddi4+0x2b2>
 8000400:	f1a8 0802 	sub.w	r8, r8, #2
 8000404:	4464      	add	r4, ip
 8000406:	1a24      	subs	r4, r4, r0
 8000408:	b298      	uxth	r0, r3
 800040a:	fbb4 f3f9 	udiv	r3, r4, r9
 800040e:	fb09 4413 	mls	r4, r9, r3, r4
 8000412:	fb03 fe0e 	mul.w	lr, r3, lr
 8000416:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800041a:	45a6      	cmp	lr, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f103 30ff 	add.w	r0, r3, #4294967295
 8000426:	d26a      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 8000428:	45a6      	cmp	lr, r4
 800042a:	d968      	bls.n	80004fe <__udivmoddi4+0x2aa>
 800042c:	3b02      	subs	r3, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000434:	fba0 9302 	umull	r9, r3, r0, r2
 8000438:	eba4 040e 	sub.w	r4, r4, lr
 800043c:	429c      	cmp	r4, r3
 800043e:	46c8      	mov	r8, r9
 8000440:	469e      	mov	lr, r3
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d067      	beq.n	800051a <__udivmoddi4+0x2c6>
 800044a:	ebb5 0308 	subs.w	r3, r5, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	40cb      	lsrs	r3, r1
 8000454:	fa04 f707 	lsl.w	r7, r4, r7
 8000458:	431f      	orrs	r7, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	2100      	movs	r1, #0
 8000462:	e74a      	b.n	80002fa <__udivmoddi4+0xa6>
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	f1c3 0020 	rsb	r0, r3, #32
 800046c:	40c1      	lsrs	r1, r0
 800046e:	409d      	lsls	r5, r3
 8000470:	fa24 f000 	lsr.w	r0, r4, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	4328      	orrs	r0, r5
 800047a:	fbb1 f5f7 	udiv	r5, r1, r7
 800047e:	fb07 1115 	mls	r1, r7, r5, r1
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	0c02      	lsrs	r2, r0, #16
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	fb05 f10e 	mul.w	r1, r5, lr
 8000490:	4291      	cmp	r1, r2
 8000492:	fa04 f403 	lsl.w	r4, r4, r3
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x256>
 8000498:	eb1c 0202 	adds.w	r2, ip, r2
 800049c:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a0:	d22f      	bcs.n	8000502 <__udivmoddi4+0x2ae>
 80004a2:	4291      	cmp	r1, r2
 80004a4:	d92d      	bls.n	8000502 <__udivmoddi4+0x2ae>
 80004a6:	3d02      	subs	r5, #2
 80004a8:	4462      	add	r2, ip
 80004aa:	1a52      	subs	r2, r2, r1
 80004ac:	fbb2 f1f7 	udiv	r1, r2, r7
 80004b0:	fb07 2211 	mls	r2, r7, r1, r2
 80004b4:	b280      	uxth	r0, r0
 80004b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004ba:	fb01 f20e 	mul.w	r2, r1, lr
 80004be:	4282      	cmp	r2, r0
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x280>
 80004c2:	eb1c 0000 	adds.w	r0, ip, r0
 80004c6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004ca:	d216      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d914      	bls.n	80004fa <__udivmoddi4+0x2a6>
 80004d0:	3902      	subs	r1, #2
 80004d2:	4460      	add	r0, ip
 80004d4:	1a80      	subs	r0, r0, r2
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4631      	mov	r1, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e70b      	b.n	80002fa <__udivmoddi4+0xa6>
 80004e2:	4671      	mov	r1, lr
 80004e4:	e6e9      	b.n	80002ba <__udivmoddi4+0x66>
 80004e6:	4610      	mov	r0, r2
 80004e8:	e6fe      	b.n	80002e8 <__udivmoddi4+0x94>
 80004ea:	454d      	cmp	r5, r9
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb9 0802 	subs.w	r8, r9, r2
 80004f2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7a5      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fa:	4641      	mov	r1, r8
 80004fc:	e7ea      	b.n	80004d4 <__udivmoddi4+0x280>
 80004fe:	4603      	mov	r3, r0
 8000500:	e796      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000502:	4645      	mov	r5, r8
 8000504:	e7d1      	b.n	80004aa <__udivmoddi4+0x256>
 8000506:	46d0      	mov	r8, sl
 8000508:	e77d      	b.n	8000406 <__udivmoddi4+0x1b2>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e749      	b.n	80003a4 <__udivmoddi4+0x150>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e731      	b.n	800037a <__udivmoddi4+0x126>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xdc>
 800051a:	4631      	mov	r1, r6
 800051c:	e6ed      	b.n	80002fa <__udivmoddi4+0xa6>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 f9c6 	bl	80008b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f81a 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f884 	bl	800063c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000534:	f000 f858 	bl	80005e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LED1_Pin_GPIO_Port, LED1_Pin_Pin);
 8000538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053c:	4806      	ldr	r0, [pc, #24]	; (8000558 <main+0x34>)
 800053e:	f000 fcc1 	bl	8000ec4 <HAL_GPIO_TogglePin>
		  	  HAL_Delay(100);
 8000542:	2064      	movs	r0, #100	; 0x64
 8000544:	f000 fa1a 	bl	800097c <HAL_Delay>
		  	HAL_UART_Transmit(&huart2, &uart2_data2, 1, 1000);
 8000548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054c:	2201      	movs	r2, #1
 800054e:	4903      	ldr	r1, [pc, #12]	; (800055c <main+0x38>)
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <main+0x3c>)
 8000552:	f001 fa65 	bl	8001a20 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LED1_Pin_GPIO_Port, LED1_Pin_Pin);
 8000556:	e7ef      	b.n	8000538 <main+0x14>
 8000558:	40010c00 	.word	0x40010c00
 800055c:	20000000 	.word	0x20000000
 8000560:	2000002c 	.word	0x2000002c

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0318 	add.w	r3, r7, #24
 800056e:	2238      	movs	r2, #56	; 0x38
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fbd4 	bl	8001d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058a:	2301      	movs	r3, #1
 800058c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058e:	2310      	movs	r3, #16
 8000590:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000592:	2300      	movs	r3, #0
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000596:	2300      	movs	r3, #0
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0318 	add.w	r3, r7, #24
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fcaa 	bl	8000ef8 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x4a>
  {
    Error_Handler();
 80005aa:	f000 f89f 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 ffac 	bl	8001524 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005d2:	f000 f88b 	bl	80006ec <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80005d6:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <SystemClock_Config+0x80>)
 80005d8:	2201      	movs	r2, #1
 80005da:	601a      	str	r2, [r3, #0]
}
 80005dc:	bf00      	nop
 80005de:	3750      	adds	r7, #80	; 0x50
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	42420070 	.word	0x42420070

080005e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_USART2_UART_Init+0x4c>)
 80005ee:	4a12      	ldr	r2, [pc, #72]	; (8000638 <MX_USART2_UART_Init+0x50>)
 80005f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <MX_USART2_UART_Init+0x4c>)
 80005f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_USART2_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_USART2_UART_Init+0x4c>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <MX_USART2_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_USART2_UART_Init+0x4c>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <MX_USART2_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_USART2_UART_Init+0x4c>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_USART2_UART_Init+0x4c>)
 8000620:	f001 f9ae 	bl	8001980 <HAL_UART_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800062a:	f000 f85f 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000002c 	.word	0x2000002c
 8000638:	40004400 	.word	0x40004400

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000650:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <MX_GPIO_Init+0xa8>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a23      	ldr	r2, [pc, #140]	; (80006e4 <MX_GPIO_Init+0xa8>)
 8000656:	f043 0310 	orr.w	r3, r3, #16
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <MX_GPIO_Init+0xa8>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0310 	and.w	r3, r3, #16
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_GPIO_Init+0xa8>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a1d      	ldr	r2, [pc, #116]	; (80006e4 <MX_GPIO_Init+0xa8>)
 800066e:	f043 0304 	orr.w	r3, r3, #4
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_GPIO_Init+0xa8>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0304 	and.w	r3, r3, #4
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_GPIO_Init+0xa8>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <MX_GPIO_Init+0xa8>)
 8000686:	f043 0320 	orr.w	r3, r3, #32
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_GPIO_Init+0xa8>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0320 	and.w	r3, r3, #32
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_GPIO_Init+0xa8>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a11      	ldr	r2, [pc, #68]	; (80006e4 <MX_GPIO_Init+0xa8>)
 800069e:	f043 0308 	orr.w	r3, r3, #8
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_GPIO_Init+0xa8>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0308 	and.w	r3, r3, #8
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_Pin_GPIO_Port, LED1_Pin_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b6:	480c      	ldr	r0, [pc, #48]	; (80006e8 <MX_GPIO_Init+0xac>)
 80006b8:	f000 fbec 	bl	8000e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin_Pin */
  GPIO_InitStruct.Pin = LED1_Pin_Pin;
 80006bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_Pin_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	4619      	mov	r1, r3
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_GPIO_Init+0xac>)
 80006d6:	f000 fa59 	bl	8000b8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006da:	bf00      	nop
 80006dc:	3720      	adds	r7, #32
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010c00 	.word	0x40010c00

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_MspInit+0x5c>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4a14      	ldr	r2, [pc, #80]	; (8000754 <HAL_MspInit+0x5c>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6193      	str	r3, [r2, #24]
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_MspInit+0x5c>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x5c>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <HAL_MspInit+0x5c>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <HAL_MspInit+0x5c>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_MspInit+0x60>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_MspInit+0x60>)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	40021000 	.word	0x40021000
 8000758:	40010000 	.word	0x40010000

0800075c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a22      	ldr	r2, [pc, #136]	; (8000800 <HAL_UART_MspInit+0xa4>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d13d      	bne.n	80007f8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <HAL_UART_MspInit+0xa8>)
 800077e:	69db      	ldr	r3, [r3, #28]
 8000780:	4a20      	ldr	r2, [pc, #128]	; (8000804 <HAL_UART_MspInit+0xa8>)
 8000782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000786:	61d3      	str	r3, [r2, #28]
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <HAL_UART_MspInit+0xa8>)
 800078a:	69db      	ldr	r3, [r3, #28]
 800078c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <HAL_UART_MspInit+0xa8>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a1a      	ldr	r2, [pc, #104]	; (8000804 <HAL_UART_MspInit+0xa8>)
 800079a:	f043 0320 	orr.w	r3, r3, #32
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <HAL_UART_MspInit+0xa8>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0320 	and.w	r3, r3, #32
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007ac:	2320      	movs	r3, #32
 80007ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <HAL_UART_MspInit+0xac>)
 80007c0:	f000 f9e4 	bl	8000b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007c4:	2340      	movs	r3, #64	; 0x40
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	480c      	ldr	r0, [pc, #48]	; (8000808 <HAL_UART_MspInit+0xac>)
 80007d8:	f000 f9d8 	bl	8000b8c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART2_ENABLE();
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <HAL_UART_MspInit+0xb0>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
 80007f2:	4a06      	ldr	r2, [pc, #24]	; (800080c <HAL_UART_MspInit+0xb0>)
 80007f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40004400 	.word	0x40004400
 8000804:	40021000 	.word	0x40021000
 8000808:	40011400 	.word	0x40011400
 800080c:	40010000 	.word	0x40010000

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000814:	e7fe      	b.n	8000814 <NMI_Handler+0x4>

08000816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <HardFault_Handler+0x4>

0800081c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <MemManage_Handler+0x4>

08000822 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <UsageFault_Handler+0x4>

0800082e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr

0800083a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000856:	f000 f875 	bl	8000944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}

0800085e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
	...

0800086c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800086c:	f7ff fff7 	bl	800085e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000870:	480b      	ldr	r0, [pc, #44]	; (80008a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000872:	490c      	ldr	r1, [pc, #48]	; (80008a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000874:	4a0c      	ldr	r2, [pc, #48]	; (80008a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a09      	ldr	r2, [pc, #36]	; (80008ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000888:	4c09      	ldr	r4, [pc, #36]	; (80008b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000896:	f001 fa4b 	bl	8001d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800089a:	f7ff fe43 	bl	8000524 <main>
  bx lr
 800089e:	4770      	bx	lr
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008a8:	08001dd8 	.word	0x08001dd8
  ldr r2, =_sbss
 80008ac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008b0:	20000078 	.word	0x20000078

080008b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC1_2_IRQHandler>
	...

080008b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <HAL_Init+0x28>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <HAL_Init+0x28>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c8:	2003      	movs	r0, #3
 80008ca:	f000 f92b 	bl	8000b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ce:	200f      	movs	r0, #15
 80008d0:	f000 f808 	bl	80008e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d4:	f7ff ff10 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40022000 	.word	0x40022000

080008e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_InitTick+0x54>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_InitTick+0x58>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f935 	bl	8000b72 <HAL_SYSTICK_Config>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e00e      	b.n	8000930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b0f      	cmp	r3, #15
 8000916:	d80a      	bhi.n	800092e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000918:	2200      	movs	r2, #0
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	f000 f90b 	bl	8000b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000924:	4a06      	ldr	r2, [pc, #24]	; (8000940 <HAL_InitTick+0x5c>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	e000      	b.n	8000930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000004 	.word	0x20000004
 800093c:	2000000c 	.word	0x2000000c
 8000940:	20000008 	.word	0x20000008

08000944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_IncTick+0x1c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_IncTick+0x20>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4413      	add	r3, r2
 8000954:	4a03      	ldr	r2, [pc, #12]	; (8000964 <HAL_IncTick+0x20>)
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	2000000c 	.word	0x2000000c
 8000964:	20000074 	.word	0x20000074

08000968 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b02      	ldr	r3, [pc, #8]	; (8000978 <HAL_GetTick+0x10>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	20000074 	.word	0x20000074

0800097c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000984:	f7ff fff0 	bl	8000968 <HAL_GetTick>
 8000988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000994:	d005      	beq.n	80009a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_Delay+0x44>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4413      	add	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009a2:	bf00      	nop
 80009a4:	f7ff ffe0 	bl	8000968 <HAL_GetTick>
 80009a8:	4602      	mov	r2, r0
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d8f7      	bhi.n	80009a4 <HAL_Delay+0x28>
  {
  }
}
 80009b4:	bf00      	nop
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000000c 	.word	0x2000000c

080009c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e0:	4013      	ands	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f6:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	60d3      	str	r3, [r2, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <__NVIC_GetPriorityGrouping+0x18>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	f003 0307 	and.w	r3, r3, #7
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db0a      	blt.n	8000a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	490c      	ldr	r1, [pc, #48]	; (8000a74 <__NVIC_SetPriority+0x4c>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a50:	e00a      	b.n	8000a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4908      	ldr	r1, [pc, #32]	; (8000a78 <__NVIC_SetPriority+0x50>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	0112      	lsls	r2, r2, #4
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	761a      	strb	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f1c3 0307 	rsb	r3, r3, #7
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	bf28      	it	cs
 8000a9a:	2304      	movcs	r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d902      	bls.n	8000aac <NVIC_EncodePriority+0x30>
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3b03      	subs	r3, #3
 8000aaa:	e000      	b.n	8000aae <NVIC_EncodePriority+0x32>
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43da      	mvns	r2, r3
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	401a      	ands	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43d9      	mvns	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	4313      	orrs	r3, r2
         );
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3724      	adds	r7, #36	; 0x24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af0:	d301      	bcc.n	8000af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00f      	b.n	8000b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <SysTick_Config+0x40>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afe:	210f      	movs	r1, #15
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f7ff ff90 	bl	8000a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <SysTick_Config+0x40>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <SysTick_Config+0x40>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ff49 	bl	80009c4 <__NVIC_SetPriorityGrouping>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b4c:	f7ff ff5e 	bl	8000a0c <__NVIC_GetPriorityGrouping>
 8000b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f7ff ff90 	bl	8000a7c <NVIC_EncodePriority>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff5f 	bl	8000a28 <__NVIC_SetPriority>
}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff ffb0 	bl	8000ae0 <SysTick_Config>
 8000b80:	4603      	mov	r3, r0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b08b      	sub	sp, #44	; 0x2c
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9e:	e169      	b.n	8000e74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	69fa      	ldr	r2, [r7, #28]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	f040 8158 	bne.w	8000e6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	4a9a      	ldr	r2, [pc, #616]	; (8000e2c <HAL_GPIO_Init+0x2a0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d05e      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
 8000bc8:	4a98      	ldr	r2, [pc, #608]	; (8000e2c <HAL_GPIO_Init+0x2a0>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d875      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000bce:	4a98      	ldr	r2, [pc, #608]	; (8000e30 <HAL_GPIO_Init+0x2a4>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d058      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
 8000bd4:	4a96      	ldr	r2, [pc, #600]	; (8000e30 <HAL_GPIO_Init+0x2a4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d86f      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000bda:	4a96      	ldr	r2, [pc, #600]	; (8000e34 <HAL_GPIO_Init+0x2a8>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d052      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
 8000be0:	4a94      	ldr	r2, [pc, #592]	; (8000e34 <HAL_GPIO_Init+0x2a8>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d869      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000be6:	4a94      	ldr	r2, [pc, #592]	; (8000e38 <HAL_GPIO_Init+0x2ac>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d04c      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
 8000bec:	4a92      	ldr	r2, [pc, #584]	; (8000e38 <HAL_GPIO_Init+0x2ac>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d863      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000bf2:	4a92      	ldr	r2, [pc, #584]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d046      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
 8000bf8:	4a90      	ldr	r2, [pc, #576]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d85d      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000bfe:	2b12      	cmp	r3, #18
 8000c00:	d82a      	bhi.n	8000c58 <HAL_GPIO_Init+0xcc>
 8000c02:	2b12      	cmp	r3, #18
 8000c04:	d859      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000c06:	a201      	add	r2, pc, #4	; (adr r2, 8000c0c <HAL_GPIO_Init+0x80>)
 8000c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0c:	08000c87 	.word	0x08000c87
 8000c10:	08000c61 	.word	0x08000c61
 8000c14:	08000c73 	.word	0x08000c73
 8000c18:	08000cb5 	.word	0x08000cb5
 8000c1c:	08000cbb 	.word	0x08000cbb
 8000c20:	08000cbb 	.word	0x08000cbb
 8000c24:	08000cbb 	.word	0x08000cbb
 8000c28:	08000cbb 	.word	0x08000cbb
 8000c2c:	08000cbb 	.word	0x08000cbb
 8000c30:	08000cbb 	.word	0x08000cbb
 8000c34:	08000cbb 	.word	0x08000cbb
 8000c38:	08000cbb 	.word	0x08000cbb
 8000c3c:	08000cbb 	.word	0x08000cbb
 8000c40:	08000cbb 	.word	0x08000cbb
 8000c44:	08000cbb 	.word	0x08000cbb
 8000c48:	08000cbb 	.word	0x08000cbb
 8000c4c:	08000cbb 	.word	0x08000cbb
 8000c50:	08000c69 	.word	0x08000c69
 8000c54:	08000c7d 	.word	0x08000c7d
 8000c58:	4a79      	ldr	r2, [pc, #484]	; (8000e40 <HAL_GPIO_Init+0x2b4>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d013      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c5e:	e02c      	b.n	8000cba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	623b      	str	r3, [r7, #32]
          break;
 8000c66:	e029      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	623b      	str	r3, [r7, #32]
          break;
 8000c70:	e024      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	3308      	adds	r3, #8
 8000c78:	623b      	str	r3, [r7, #32]
          break;
 8000c7a:	e01f      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	330c      	adds	r3, #12
 8000c82:	623b      	str	r3, [r7, #32]
          break;
 8000c84:	e01a      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d102      	bne.n	8000c94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	623b      	str	r3, [r7, #32]
          break;
 8000c92:	e013      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d105      	bne.n	8000ca8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	69fa      	ldr	r2, [r7, #28]
 8000ca4:	611a      	str	r2, [r3, #16]
          break;
 8000ca6:	e009      	b.n	8000cbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69fa      	ldr	r2, [r7, #28]
 8000cb0:	615a      	str	r2, [r3, #20]
          break;
 8000cb2:	e003      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
          break;
 8000cb8:	e000      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          break;
 8000cba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	2bff      	cmp	r3, #255	; 0xff
 8000cc0:	d801      	bhi.n	8000cc6 <HAL_GPIO_Init+0x13a>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	e001      	b.n	8000cca <HAL_GPIO_Init+0x13e>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	2bff      	cmp	r3, #255	; 0xff
 8000cd0:	d802      	bhi.n	8000cd8 <HAL_GPIO_Init+0x14c>
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	e002      	b.n	8000cde <HAL_GPIO_Init+0x152>
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cda:	3b08      	subs	r3, #8
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	210f      	movs	r1, #15
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	401a      	ands	r2, r3
 8000cf0:	6a39      	ldr	r1, [r7, #32]
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 80b1 	beq.w	8000e6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d0c:	4b4d      	ldr	r3, [pc, #308]	; (8000e44 <HAL_GPIO_Init+0x2b8>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a4c      	ldr	r2, [pc, #304]	; (8000e44 <HAL_GPIO_Init+0x2b8>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b4a      	ldr	r3, [pc, #296]	; (8000e44 <HAL_GPIO_Init+0x2b8>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d24:	4a48      	ldr	r2, [pc, #288]	; (8000e48 <HAL_GPIO_Init+0x2bc>)
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a40      	ldr	r2, [pc, #256]	; (8000e4c <HAL_GPIO_Init+0x2c0>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d013      	beq.n	8000d78 <HAL_GPIO_Init+0x1ec>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a3f      	ldr	r2, [pc, #252]	; (8000e50 <HAL_GPIO_Init+0x2c4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d00d      	beq.n	8000d74 <HAL_GPIO_Init+0x1e8>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a3e      	ldr	r2, [pc, #248]	; (8000e54 <HAL_GPIO_Init+0x2c8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d007      	beq.n	8000d70 <HAL_GPIO_Init+0x1e4>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a3d      	ldr	r2, [pc, #244]	; (8000e58 <HAL_GPIO_Init+0x2cc>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d101      	bne.n	8000d6c <HAL_GPIO_Init+0x1e0>
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e006      	b.n	8000d7a <HAL_GPIO_Init+0x1ee>
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	e004      	b.n	8000d7a <HAL_GPIO_Init+0x1ee>
 8000d70:	2302      	movs	r3, #2
 8000d72:	e002      	b.n	8000d7a <HAL_GPIO_Init+0x1ee>
 8000d74:	2301      	movs	r3, #1
 8000d76:	e000      	b.n	8000d7a <HAL_GPIO_Init+0x1ee>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d7c:	f002 0203 	and.w	r2, r2, #3
 8000d80:	0092      	lsls	r2, r2, #2
 8000d82:	4093      	lsls	r3, r2
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d8a:	492f      	ldr	r1, [pc, #188]	; (8000e48 <HAL_GPIO_Init+0x2bc>)
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3302      	adds	r3, #2
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000da4:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	492c      	ldr	r1, [pc, #176]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	608b      	str	r3, [r1, #8]
 8000db0:	e006      	b.n	8000dc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000db2:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	4928      	ldr	r1, [pc, #160]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d006      	beq.n	8000dda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dcc:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	4922      	ldr	r1, [pc, #136]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	60cb      	str	r3, [r1, #12]
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	491e      	ldr	r1, [pc, #120]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d006      	beq.n	8000e02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	4918      	ldr	r1, [pc, #96]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	604b      	str	r3, [r1, #4]
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	4914      	ldr	r1, [pc, #80]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d021      	beq.n	8000e60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	490e      	ldr	r1, [pc, #56]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]
 8000e28:	e021      	b.n	8000e6e <HAL_GPIO_Init+0x2e2>
 8000e2a:	bf00      	nop
 8000e2c:	10320000 	.word	0x10320000
 8000e30:	10310000 	.word	0x10310000
 8000e34:	10220000 	.word	0x10220000
 8000e38:	10210000 	.word	0x10210000
 8000e3c:	10120000 	.word	0x10120000
 8000e40:	10110000 	.word	0x10110000
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010000 	.word	0x40010000
 8000e4c:	40010800 	.word	0x40010800
 8000e50:	40010c00 	.word	0x40010c00
 8000e54:	40011000 	.word	0x40011000
 8000e58:	40011400 	.word	0x40011400
 8000e5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_GPIO_Init+0x304>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	4909      	ldr	r1, [pc, #36]	; (8000e90 <HAL_GPIO_Init+0x304>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	3301      	adds	r3, #1
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f47f ae8e 	bne.w	8000ba0 <HAL_GPIO_Init+0x14>
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	372c      	adds	r7, #44	; 0x2c
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	40010400 	.word	0x40010400

08000e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	807b      	strh	r3, [r7, #2]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ea4:	787b      	ldrb	r3, [r7, #1]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eaa:	887a      	ldrh	r2, [r7, #2]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eb0:	e003      	b.n	8000eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	041a      	lsls	r2, r3, #16
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	611a      	str	r2, [r3, #16]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4013      	ands	r3, r2
 8000edc:	041a      	lsls	r2, r3, #16
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	43d9      	mvns	r1, r3
 8000ee2:	887b      	ldrh	r3, [r7, #2]
 8000ee4:	400b      	ands	r3, r1
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	611a      	str	r2, [r3, #16]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
	...

08000ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e304      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8087 	beq.w	8001026 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f18:	4b92      	ldr	r3, [pc, #584]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d00c      	beq.n	8000f3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f24:	4b8f      	ldr	r3, [pc, #572]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 030c 	and.w	r3, r3, #12
 8000f2c:	2b08      	cmp	r3, #8
 8000f2e:	d112      	bne.n	8000f56 <HAL_RCC_OscConfig+0x5e>
 8000f30:	4b8c      	ldr	r3, [pc, #560]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3c:	d10b      	bne.n	8000f56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3e:	4b89      	ldr	r3, [pc, #548]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d06c      	beq.n	8001024 <HAL_RCC_OscConfig+0x12c>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d168      	bne.n	8001024 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e2de      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5e:	d106      	bne.n	8000f6e <HAL_RCC_OscConfig+0x76>
 8000f60:	4b80      	ldr	r3, [pc, #512]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a7f      	ldr	r2, [pc, #508]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	e02e      	b.n	8000fcc <HAL_RCC_OscConfig+0xd4>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10c      	bne.n	8000f90 <HAL_RCC_OscConfig+0x98>
 8000f76:	4b7b      	ldr	r3, [pc, #492]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a7a      	ldr	r2, [pc, #488]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b78      	ldr	r3, [pc, #480]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a77      	ldr	r2, [pc, #476]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e01d      	b.n	8000fcc <HAL_RCC_OscConfig+0xd4>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f98:	d10c      	bne.n	8000fb4 <HAL_RCC_OscConfig+0xbc>
 8000f9a:	4b72      	ldr	r3, [pc, #456]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a71      	ldr	r2, [pc, #452]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b6f      	ldr	r3, [pc, #444]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a6e      	ldr	r2, [pc, #440]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e00b      	b.n	8000fcc <HAL_RCC_OscConfig+0xd4>
 8000fb4:	4b6b      	ldr	r3, [pc, #428]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a6a      	ldr	r2, [pc, #424]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b68      	ldr	r3, [pc, #416]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a67      	ldr	r2, [pc, #412]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d013      	beq.n	8000ffc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fcc8 	bl	8000968 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fcc4 	bl	8000968 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	; 0x64
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e292      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fee:	4b5d      	ldr	r3, [pc, #372]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0xe4>
 8000ffa:	e014      	b.n	8001026 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fcb4 	bl	8000968 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff fcb0 	bl	8000968 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	; 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e27e      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001016:	4b53      	ldr	r3, [pc, #332]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x10c>
 8001022:	e000      	b.n	8001026 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d063      	beq.n	80010fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001032:	4b4c      	ldr	r3, [pc, #304]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800103e:	4b49      	ldr	r3, [pc, #292]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b08      	cmp	r3, #8
 8001048:	d11c      	bne.n	8001084 <HAL_RCC_OscConfig+0x18c>
 800104a:	4b46      	ldr	r3, [pc, #280]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d116      	bne.n	8001084 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001056:	4b43      	ldr	r3, [pc, #268]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d005      	beq.n	800106e <HAL_RCC_OscConfig+0x176>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d001      	beq.n	800106e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e252      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106e:	4b3d      	ldr	r3, [pc, #244]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	4939      	ldr	r1, [pc, #228]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 800107e:	4313      	orrs	r3, r2
 8001080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001082:	e03a      	b.n	80010fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d020      	beq.n	80010ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <HAL_RCC_OscConfig+0x270>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fc69 	bl	8000968 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800109a:	f7ff fc65 	bl	8000968 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e233      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b8:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4927      	ldr	r1, [pc, #156]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	600b      	str	r3, [r1, #0]
 80010cc:	e015      	b.n	80010fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <HAL_RCC_OscConfig+0x270>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fc48 	bl	8000968 <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010dc:	f7ff fc44 	bl	8000968 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e212      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f0      	bne.n	80010dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	2b00      	cmp	r3, #0
 8001104:	d03a      	beq.n	800117c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d019      	beq.n	8001142 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_RCC_OscConfig+0x274>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001114:	f7ff fc28 	bl	8000968 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800111c:	f7ff fc24 	bl	8000968 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e1f2      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f0      	beq.n	800111c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800113a:	2001      	movs	r0, #1
 800113c:	f000 fc02 	bl	8001944 <RCC_Delay>
 8001140:	e01c      	b.n	800117c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_RCC_OscConfig+0x274>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001148:	f7ff fc0e 	bl	8000968 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800114e:	e00f      	b.n	8001170 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001150:	f7ff fc0a 	bl	8000968 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d908      	bls.n	8001170 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e1d8      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	42420000 	.word	0x42420000
 800116c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001170:	4b9b      	ldr	r3, [pc, #620]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1e9      	bne.n	8001150 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80a6 	beq.w	80012d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118e:	4b94      	ldr	r3, [pc, #592]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10d      	bne.n	80011b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b91      	ldr	r3, [pc, #580]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a90      	ldr	r2, [pc, #576]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b8e      	ldr	r3, [pc, #568]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b2:	2301      	movs	r3, #1
 80011b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b6:	4b8b      	ldr	r3, [pc, #556]	; (80013e4 <HAL_RCC_OscConfig+0x4ec>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d118      	bne.n	80011f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011c2:	4b88      	ldr	r3, [pc, #544]	; (80013e4 <HAL_RCC_OscConfig+0x4ec>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a87      	ldr	r2, [pc, #540]	; (80013e4 <HAL_RCC_OscConfig+0x4ec>)
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ce:	f7ff fbcb 	bl	8000968 <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d6:	f7ff fbc7 	bl	8000968 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b64      	cmp	r3, #100	; 0x64
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e195      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e8:	4b7e      	ldr	r3, [pc, #504]	; (80013e4 <HAL_RCC_OscConfig+0x4ec>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f0      	beq.n	80011d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d106      	bne.n	800120a <HAL_RCC_OscConfig+0x312>
 80011fc:	4b78      	ldr	r3, [pc, #480]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	4a77      	ldr	r2, [pc, #476]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6213      	str	r3, [r2, #32]
 8001208:	e02d      	b.n	8001266 <HAL_RCC_OscConfig+0x36e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x334>
 8001212:	4b73      	ldr	r3, [pc, #460]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	4a72      	ldr	r2, [pc, #456]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	6213      	str	r3, [r2, #32]
 800121e:	4b70      	ldr	r3, [pc, #448]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	4a6f      	ldr	r2, [pc, #444]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001224:	f023 0304 	bic.w	r3, r3, #4
 8001228:	6213      	str	r3, [r2, #32]
 800122a:	e01c      	b.n	8001266 <HAL_RCC_OscConfig+0x36e>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d10c      	bne.n	800124e <HAL_RCC_OscConfig+0x356>
 8001234:	4b6a      	ldr	r3, [pc, #424]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4a69      	ldr	r2, [pc, #420]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	6213      	str	r3, [r2, #32]
 8001240:	4b67      	ldr	r3, [pc, #412]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4a66      	ldr	r2, [pc, #408]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6213      	str	r3, [r2, #32]
 800124c:	e00b      	b.n	8001266 <HAL_RCC_OscConfig+0x36e>
 800124e:	4b64      	ldr	r3, [pc, #400]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4a63      	ldr	r2, [pc, #396]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	6213      	str	r3, [r2, #32]
 800125a:	4b61      	ldr	r3, [pc, #388]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	4a60      	ldr	r2, [pc, #384]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001260:	f023 0304 	bic.w	r3, r3, #4
 8001264:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d015      	beq.n	800129a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126e:	f7ff fb7b 	bl	8000968 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001276:	f7ff fb77 	bl	8000968 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	f241 3288 	movw	r2, #5000	; 0x1388
 8001284:	4293      	cmp	r3, r2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e143      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128c:	4b54      	ldr	r3, [pc, #336]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0ee      	beq.n	8001276 <HAL_RCC_OscConfig+0x37e>
 8001298:	e014      	b.n	80012c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff fb65 	bl	8000968 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a0:	e00a      	b.n	80012b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7ff fb61 	bl	8000968 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e12d      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b8:	4b49      	ldr	r3, [pc, #292]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1ee      	bne.n	80012a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d105      	bne.n	80012d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ca:	4b45      	ldr	r3, [pc, #276]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a44      	ldr	r2, [pc, #272]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80012d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 808c 	beq.w	80013f8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80012e0:	4b3f      	ldr	r3, [pc, #252]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ec:	d10e      	bne.n	800130c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80012ee:	4b3c      	ldr	r3, [pc, #240]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d108      	bne.n	800130c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80012fa:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001306:	d101      	bne.n	800130c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e103      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	2b02      	cmp	r3, #2
 8001312:	d14e      	bne.n	80013b2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001314:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d009      	beq.n	8001334 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001320:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800132c:	429a      	cmp	r2, r3
 800132e:	d001      	beq.n	8001334 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0ef      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <HAL_RCC_OscConfig+0x4f0>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff fb15 	bl	8000968 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001342:	f7ff fb11 	bl	8000968 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b64      	cmp	r3, #100	; 0x64
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e0df      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001354:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f0      	bne.n	8001342 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136c:	491c      	ldr	r1, [pc, #112]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 800136e:	4313      	orrs	r3, r2
 8001370:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001376:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4918      	ldr	r1, [pc, #96]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 8001380:	4313      	orrs	r3, r2
 8001382:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_RCC_OscConfig+0x4f0>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7ff faed 	bl	8000968 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001392:	f7ff fae9 	bl	8000968 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b64      	cmp	r3, #100	; 0x64
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e0b7      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x49a>
 80013b0:	e022      	b.n	80013f8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_RCC_OscConfig+0x4e8>)
 80013b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_RCC_OscConfig+0x4f0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fad0 	bl	8000968 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80013ca:	e00f      	b.n	80013ec <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80013cc:	f7ff facc 	bl	8000968 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	; 0x64
 80013d8:	d908      	bls.n	80013ec <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e09a      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40007000 	.word	0x40007000
 80013e8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80013ec:	4b4b      	ldr	r3, [pc, #300]	; (800151c <HAL_RCC_OscConfig+0x624>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1e9      	bne.n	80013cc <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 8088 	beq.w	8001512 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001402:	4b46      	ldr	r3, [pc, #280]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b08      	cmp	r3, #8
 800140c:	d068      	beq.n	80014e0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d14d      	bne.n	80014b2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001416:	4b42      	ldr	r3, [pc, #264]	; (8001520 <HAL_RCC_OscConfig+0x628>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff faa4 	bl	8000968 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001424:	f7ff faa0 	bl	8000968 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e06e      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001436:	4b39      	ldr	r3, [pc, #228]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144a:	d10f      	bne.n	800146c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800144c:	4b33      	ldr	r3, [pc, #204]	; (800151c <HAL_RCC_OscConfig+0x624>)
 800144e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4931      	ldr	r1, [pc, #196]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001456:	4313      	orrs	r3, r2
 8001458:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <HAL_RCC_OscConfig+0x624>)
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	f023 020f 	bic.w	r2, r3, #15
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	492d      	ldr	r1, [pc, #180]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001468:	4313      	orrs	r3, r2
 800146a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800146c:	4b2b      	ldr	r3, [pc, #172]	; (800151c <HAL_RCC_OscConfig+0x624>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	430b      	orrs	r3, r1
 800147e:	4927      	ldr	r1, [pc, #156]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001480:	4313      	orrs	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001484:	4b26      	ldr	r3, [pc, #152]	; (8001520 <HAL_RCC_OscConfig+0x628>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148a:	f7ff fa6d 	bl	8000968 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001492:	f7ff fa69 	bl	8000968 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e037      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <HAL_RCC_OscConfig+0x624>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x59a>
 80014b0:	e02f      	b.n	8001512 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_RCC_OscConfig+0x628>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fa56 	bl	8000968 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff fa52 	bl	8000968 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e020      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_RCC_OscConfig+0x624>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x5c8>
 80014de:	e018      	b.n	8001512 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e013      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_RCC_OscConfig+0x624>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d106      	bne.n	800150e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150a:	429a      	cmp	r2, r3
 800150c:	d001      	beq.n	8001512 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	42420060 	.word	0x42420060

08001524 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0d0      	b.n	80016da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001538:	4b6a      	ldr	r3, [pc, #424]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d910      	bls.n	8001568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001546:	4b67      	ldr	r3, [pc, #412]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 0207 	bic.w	r2, r3, #7
 800154e:	4965      	ldr	r1, [pc, #404]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001556:	4b63      	ldr	r3, [pc, #396]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0b8      	b.n	80016da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001580:	4b59      	ldr	r3, [pc, #356]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4a58      	ldr	r2, [pc, #352]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800158a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001598:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	4a52      	ldr	r2, [pc, #328]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a4:	4b50      	ldr	r3, [pc, #320]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	494d      	ldr	r1, [pc, #308]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d040      	beq.n	8001644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d115      	bne.n	8001602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e07f      	b.n	80016da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d107      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e2:	4b41      	ldr	r3, [pc, #260]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e073      	b.n	80016da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f2:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e06b      	b.n	80016da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001602:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f023 0203 	bic.w	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4936      	ldr	r1, [pc, #216]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001614:	f7ff f9a8 	bl	8000968 <HAL_GetTick>
 8001618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161a:	e00a      	b.n	8001632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800161c:	f7ff f9a4 	bl	8000968 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	; 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e053      	b.n	80016da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001632:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 020c 	and.w	r2, r3, #12
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	429a      	cmp	r2, r3
 8001642:	d1eb      	bne.n	800161c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001644:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d210      	bcs.n	8001674 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 0207 	bic.w	r2, r3, #7
 800165a:	4922      	ldr	r1, [pc, #136]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e032      	b.n	80016da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d008      	beq.n	8001692 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4916      	ldr	r1, [pc, #88]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	490e      	ldr	r1, [pc, #56]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016b2:	f000 f821 	bl	80016f8 <HAL_RCC_GetSysClockFreq>
 80016b6:	4602      	mov	r2, r0
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	490a      	ldr	r1, [pc, #40]	; (80016ec <HAL_RCC_ClockConfig+0x1c8>)
 80016c4:	5ccb      	ldrb	r3, [r1, r3]
 80016c6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <HAL_RCC_ClockConfig+0x1cc>)
 80016cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_RCC_ClockConfig+0x1d0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff f906 	bl	80008e4 <HAL_InitTick>

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40022000 	.word	0x40022000
 80016e8:	40021000 	.word	0x40021000
 80016ec:	08001d90 	.word	0x08001d90
 80016f0:	20000004 	.word	0x20000004
 80016f4:	20000008 	.word	0x20000008

080016f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016fc:	b092      	sub	sp, #72	; 0x48
 80016fe:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001704:	2300      	movs	r3, #0
 8001706:	63bb      	str	r3, [r7, #56]	; 0x38
 8001708:	2300      	movs	r3, #0
 800170a:	647b      	str	r3, [r7, #68]	; 0x44
 800170c:	2300      	movs	r3, #0
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
 8001718:	2300      	movs	r3, #0
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800171c:	4b6b      	ldr	r3, [pc, #428]	; (80018cc <HAL_RCC_GetSysClockFreq+0x1d4>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b04      	cmp	r3, #4
 800172a:	d002      	beq.n	8001732 <HAL_RCC_GetSysClockFreq+0x3a>
 800172c:	2b08      	cmp	r3, #8
 800172e:	d003      	beq.n	8001738 <HAL_RCC_GetSysClockFreq+0x40>
 8001730:	e0c3      	b.n	80018ba <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001732:	4b67      	ldr	r3, [pc, #412]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001734:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001736:	e0c3      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800173a:	0c9b      	lsrs	r3, r3, #18
 800173c:	f003 020f 	and.w	r2, r3, #15
 8001740:	4b64      	ldr	r3, [pc, #400]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8001742:	5c9b      	ldrb	r3, [r3, r2]
 8001744:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80ac 	beq.w	80018aa <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001752:	4b5e      	ldr	r3, [pc, #376]	; (80018cc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	f003 020f 	and.w	r2, r3, #15
 800175a:	4b5f      	ldr	r3, [pc, #380]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x1e0>)
 800175c:	5c9b      	ldrb	r3, [r3, r2]
 800175e:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001760:	4b5a      	ldr	r3, [pc, #360]	; (80018cc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 808c 	beq.w	8001886 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800176e:	4b57      	ldr	r3, [pc, #348]	; (80018cc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	3301      	adds	r3, #1
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <HAL_RCC_GetSysClockFreq+0x1d4>)
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	3302      	adds	r3, #2
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	2200      	movs	r2, #0
 800178e:	623b      	str	r3, [r7, #32]
 8001790:	627a      	str	r2, [r7, #36]	; 0x24
 8001792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001794:	2200      	movs	r2, #0
 8001796:	4618      	mov	r0, r3
 8001798:	4611      	mov	r1, r2
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	fb00 f203 	mul.w	r2, r0, r3
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	fb03 f301 	mul.w	r3, r3, r1
 80017a6:	4413      	add	r3, r2
 80017a8:	6a3a      	ldr	r2, [r7, #32]
 80017aa:	fba2 4500 	umull	r4, r5, r2, r0
 80017ae:	442b      	add	r3, r5
 80017b0:	461d      	mov	r5, r3
 80017b2:	4622      	mov	r2, r4
 80017b4:	462b      	mov	r3, r5
 80017b6:	f04f 0000 	mov.w	r0, #0
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	0159      	lsls	r1, r3, #5
 80017c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017c4:	0150      	lsls	r0, r2, #5
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	ebb2 0a04 	subs.w	sl, r2, r4
 80017ce:	eb63 0b05 	sbc.w	fp, r3, r5
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017de:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017e2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017e6:	ebb2 080a 	subs.w	r8, r2, sl
 80017ea:	eb63 090b 	sbc.w	r9, r3, fp
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001802:	4690      	mov	r8, r2
 8001804:	4699      	mov	r9, r3
 8001806:	eb18 0304 	adds.w	r3, r8, r4
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	eb49 0305 	adc.w	r3, r9, r5
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800181e:	4629      	mov	r1, r5
 8001820:	024b      	lsls	r3, r1, #9
 8001822:	4620      	mov	r0, r4
 8001824:	4629      	mov	r1, r5
 8001826:	4604      	mov	r4, r0
 8001828:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800182c:	4601      	mov	r1, r0
 800182e:	024a      	lsls	r2, r1, #9
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001836:	2200      	movs	r2, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	617a      	str	r2, [r7, #20]
 800183c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800183e:	2200      	movs	r2, #0
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	60fa      	str	r2, [r7, #12]
 8001844:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001848:	4622      	mov	r2, r4
 800184a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800184e:	4645      	mov	r5, r8
 8001850:	fb05 f202 	mul.w	r2, r5, r2
 8001854:	46cc      	mov	ip, r9
 8001856:	4625      	mov	r5, r4
 8001858:	461c      	mov	r4, r3
 800185a:	4623      	mov	r3, r4
 800185c:	fb03 f30c 	mul.w	r3, r3, ip
 8001860:	4413      	add	r3, r2
 8001862:	4622      	mov	r2, r4
 8001864:	4644      	mov	r4, r8
 8001866:	fba2 2404 	umull	r2, r4, r2, r4
 800186a:	61fc      	str	r4, [r7, #28]
 800186c:	61ba      	str	r2, [r7, #24]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	4413      	add	r3, r2
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001878:	f7fe fcd4 	bl	8000224 <__aeabi_uldivmod>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4613      	mov	r3, r2
 8001882:	647b      	str	r3, [r7, #68]	; 0x44
 8001884:	e007      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001888:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800188a:	fb03 f202 	mul.w	r2, r3, r2
 800188e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8001898:	7b5b      	ldrb	r3, [r3, #13]
 800189a:	461a      	mov	r2, r3
 800189c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189e:	4293      	cmp	r3, r2
 80018a0:	d108      	bne.n	80018b4 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 80018a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018a4:	085b      	lsrs	r3, r3, #1
 80018a6:	647b      	str	r3, [r7, #68]	; 0x44
 80018a8:	e004      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ac:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <HAL_RCC_GetSysClockFreq+0x1e4>)
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 80018b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018b6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80018b8:	e002      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80018bc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80018be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3748      	adds	r7, #72	; 0x48
 80018c6:	46bd      	mov	sp, r7
 80018c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018cc:	40021000 	.word	0x40021000
 80018d0:	007a1200 	.word	0x007a1200
 80018d4:	08001da8 	.word	0x08001da8
 80018d8:	08001db8 	.word	0x08001db8
 80018dc:	003d0900 	.word	0x003d0900

080018e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018f8:	f7ff fff2 	bl	80018e0 <HAL_RCC_GetHCLKFreq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4903      	ldr	r1, [pc, #12]	; (8001918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	08001da0 	.word	0x08001da0

0800191c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001920:	f7ff ffde 	bl	80018e0 <HAL_RCC_GetHCLKFreq>
 8001924:	4602      	mov	r2, r0
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	0adb      	lsrs	r3, r3, #11
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	4903      	ldr	r1, [pc, #12]	; (8001940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001932:	5ccb      	ldrb	r3, [r1, r3]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	08001da0 	.word	0x08001da0

08001944 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <RCC_Delay+0x34>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <RCC_Delay+0x38>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	0a5b      	lsrs	r3, r3, #9
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001960:	bf00      	nop
  }
  while (Delay --);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1e5a      	subs	r2, r3, #1
 8001966:	60fa      	str	r2, [r7, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f9      	bne.n	8001960 <RCC_Delay+0x1c>
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	20000004 	.word	0x20000004
 800197c:	10624dd3 	.word	0x10624dd3

08001980 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e042      	b.n	8001a18 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d106      	bne.n	80019ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7fe fed8 	bl	800075c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2224      	movs	r2, #36	; 0x24
 80019b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f91d 	bl	8001c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2220      	movs	r2, #32
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b20      	cmp	r3, #32
 8001a3e:	d16d      	bne.n	8001b1c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_UART_Transmit+0x2c>
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e066      	b.n	8001b1e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2221      	movs	r2, #33	; 0x21
 8001a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a5e:	f7fe ff83 	bl	8000968 <HAL_GetTick>
 8001a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	88fa      	ldrh	r2, [r7, #6]
 8001a68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	88fa      	ldrh	r2, [r7, #6]
 8001a6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a78:	d108      	bne.n	8001a8c <HAL_UART_Transmit+0x6c>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d104      	bne.n	8001a8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	e003      	b.n	8001a94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a94:	e02a      	b.n	8001aec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2180      	movs	r1, #128	; 0x80
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 f840 	bl	8001b26 <UART_WaitOnFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e036      	b.n	8001b1e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10b      	bne.n	8001ace <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ac4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	3302      	adds	r3, #2
 8001aca:	61bb      	str	r3, [r7, #24]
 8001acc:	e007      	b.n	8001ade <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	3301      	adds	r3, #1
 8001adc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1cf      	bne.n	8001a96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2200      	movs	r2, #0
 8001afe:	2140      	movs	r1, #64	; 0x40
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 f810 	bl	8001b26 <UART_WaitOnFlagUntilTimeout>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e006      	b.n	8001b1e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e000      	b.n	8001b1e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001b1c:	2302      	movs	r3, #2
  }
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3720      	adds	r7, #32
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b090      	sub	sp, #64	; 0x40
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	4613      	mov	r3, r2
 8001b34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b36:	e050      	b.n	8001bda <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3e:	d04c      	beq.n	8001bda <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b46:	f7fe ff0f 	bl	8000968 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d241      	bcs.n	8001bda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	330c      	adds	r3, #12
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b60:	e853 3f00 	ldrex	r3, [r3]
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	330c      	adds	r3, #12
 8001b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b76:	637a      	str	r2, [r7, #52]	; 0x34
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b7e:	e841 2300 	strex	r3, r2, [r1]
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1e5      	bne.n	8001b56 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3314      	adds	r3, #20
 8001b90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	e853 3f00 	ldrex	r3, [r3]
 8001b98:	613b      	str	r3, [r7, #16]
   return(result);
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3314      	adds	r3, #20
 8001ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001baa:	623a      	str	r2, [r7, #32]
 8001bac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bae:	69f9      	ldr	r1, [r7, #28]
 8001bb0:	6a3a      	ldr	r2, [r7, #32]
 8001bb2:	e841 2300 	strex	r3, r2, [r1]
 8001bb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1e5      	bne.n	8001b8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e00f      	b.n	8001bfa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4013      	ands	r3, r2
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	bf0c      	ite	eq
 8001bea:	2301      	moveq	r3, #1
 8001bec:	2300      	movne	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d09f      	beq.n	8001b38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3740      	adds	r7, #64	; 0x40
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c3e:	f023 030c 	bic.w	r3, r3, #12
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699a      	ldr	r2, [r3, #24]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a2c      	ldr	r2, [pc, #176]	; (8001d18 <UART_SetConfig+0x114>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d103      	bne.n	8001c74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c6c:	f7ff fe56 	bl	800191c <HAL_RCC_GetPCLK2Freq>
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	e002      	b.n	8001c7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c74:	f7ff fe3e 	bl	80018f4 <HAL_RCC_GetPCLK1Freq>
 8001c78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	009a      	lsls	r2, r3, #2
 8001c84:	441a      	add	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c90:	4a22      	ldr	r2, [pc, #136]	; (8001d1c <UART_SetConfig+0x118>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	0119      	lsls	r1, r3, #4
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009a      	lsls	r2, r3, #2
 8001ca4:	441a      	add	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <UART_SetConfig+0x118>)
 8001cb2:	fba3 0302 	umull	r0, r3, r3, r2
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2064      	movs	r0, #100	; 0x64
 8001cba:	fb00 f303 	mul.w	r3, r0, r3
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	3332      	adds	r3, #50	; 0x32
 8001cc4:	4a15      	ldr	r2, [pc, #84]	; (8001d1c <UART_SetConfig+0x118>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd0:	4419      	add	r1, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	009a      	lsls	r2, r3, #2
 8001cdc:	441a      	add	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <UART_SetConfig+0x118>)
 8001cea:	fba3 0302 	umull	r0, r3, r3, r2
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2064      	movs	r0, #100	; 0x64
 8001cf2:	fb00 f303 	mul.w	r3, r0, r3
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	3332      	adds	r3, #50	; 0x32
 8001cfc:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <UART_SetConfig+0x118>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	f003 020f 	and.w	r2, r3, #15
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	440a      	add	r2, r1
 8001d0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40013800 	.word	0x40013800
 8001d1c:	51eb851f 	.word	0x51eb851f

08001d20 <memset>:
 8001d20:	4603      	mov	r3, r0
 8001d22:	4402      	add	r2, r0
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d100      	bne.n	8001d2a <memset+0xa>
 8001d28:	4770      	bx	lr
 8001d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d2e:	e7f9      	b.n	8001d24 <memset+0x4>

08001d30 <__libc_init_array>:
 8001d30:	b570      	push	{r4, r5, r6, lr}
 8001d32:	2600      	movs	r6, #0
 8001d34:	4d0c      	ldr	r5, [pc, #48]	; (8001d68 <__libc_init_array+0x38>)
 8001d36:	4c0d      	ldr	r4, [pc, #52]	; (8001d6c <__libc_init_array+0x3c>)
 8001d38:	1b64      	subs	r4, r4, r5
 8001d3a:	10a4      	asrs	r4, r4, #2
 8001d3c:	42a6      	cmp	r6, r4
 8001d3e:	d109      	bne.n	8001d54 <__libc_init_array+0x24>
 8001d40:	f000 f81a 	bl	8001d78 <_init>
 8001d44:	2600      	movs	r6, #0
 8001d46:	4d0a      	ldr	r5, [pc, #40]	; (8001d70 <__libc_init_array+0x40>)
 8001d48:	4c0a      	ldr	r4, [pc, #40]	; (8001d74 <__libc_init_array+0x44>)
 8001d4a:	1b64      	subs	r4, r4, r5
 8001d4c:	10a4      	asrs	r4, r4, #2
 8001d4e:	42a6      	cmp	r6, r4
 8001d50:	d105      	bne.n	8001d5e <__libc_init_array+0x2e>
 8001d52:	bd70      	pop	{r4, r5, r6, pc}
 8001d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d58:	4798      	blx	r3
 8001d5a:	3601      	adds	r6, #1
 8001d5c:	e7ee      	b.n	8001d3c <__libc_init_array+0xc>
 8001d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d62:	4798      	blx	r3
 8001d64:	3601      	adds	r6, #1
 8001d66:	e7f2      	b.n	8001d4e <__libc_init_array+0x1e>
 8001d68:	08001dd0 	.word	0x08001dd0
 8001d6c:	08001dd0 	.word	0x08001dd0
 8001d70:	08001dd0 	.word	0x08001dd0
 8001d74:	08001dd4 	.word	0x08001dd4

08001d78 <_init>:
 8001d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7a:	bf00      	nop
 8001d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d7e:	bc08      	pop	{r3}
 8001d80:	469e      	mov	lr, r3
 8001d82:	4770      	bx	lr

08001d84 <_fini>:
 8001d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d86:	bf00      	nop
 8001d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d8a:	bc08      	pop	{r3}
 8001d8c:	469e      	mov	lr, r3
 8001d8e:	4770      	bx	lr
